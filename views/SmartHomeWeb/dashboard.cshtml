@using System
@using System.Linq
@using System.Collections.Generic
@using Nancy.Security
@using SmartHomeWeb
@using SmartHomeWeb.Model
@using Nancy.ViewEngines.Razor
@inherits NancyRazorViewBase<List<Tuple<Location, IEnumerable<string>, List<Tuple<Sensor, IEnumerable<string>>>>>>

<!-- Include Date Range Picker -->
<script type="text/javascript" src="//cdn.jsdelivr.net/momentjs/latest/moment.min.js"></script>
<script type="text/javascript" src="//cdn.jsdelivr.net/bootstrap.daterangepicker/2/daterangepicker.js"></script>
<link rel="stylesheet" type="text/css" href="//cdn.jsdelivr.net/bootstrap.daterangepicker/2/daterangepicker.css" />

<h2>@TextResources.MeasurementsPageTitle</h2>

@if (@Model.Count == 0)
{
    <div class="panel panel-default">
        <div class="panel-body">
            <h3>@TextResources.EmptyDashboardTitle</h3>
            @TextResources.DashboardAddLocationPre
            <a href="/add-has-location">@TextResources.DashboardAddLocation</a>
            @TextResources.DashboardAddLocationPost
        </div>
    </div>
}
else
{
    <ul class="nav nav-tabs col-sm-12">
        @for (var x = 0; x < @Model.Count; ++x)
        {
            <li @(x == 0 ? Html.Raw("class=\"active\"") : Html.Raw(""))>
                <a data-toggle="tab" data-target="#u_@x, #tags_@x">
                    @Model[@x].Item1.Data.Name
                </a>
            </li>    
        }
    </ul>

    <div class="container col-sm-12">

        <div class="container col-sm-12" style="margin-top: 15px; padding:0px">
            <div class="col-sm-4">
                <div class="panel panel-default">

                    <div class="panel-heading">@(TextResources.RangeSelectorTitle)</div>
                    <div class="panel-body">
                        <input id="daterange" name="daterange" size="35">
                    </div>

                </div>
            </div>

			<div class="col-sm-2" style="padding:0px">
                <div class="panel panel-default">	
                    <div class="panel-heading">@(TextResources.ToolSelectorTitle)</div>
					<div class="panel-body tab-content">
						<button onclick="measurementsGraph.toggleCompare()" class="btn btn-default" style="padding: 0px;width: 25px; height: 25px;outline:none" id="compare">C</button>
						<button onclick="measurementsGraph.toggleGroup()" class="btn btn-default" style="padding: 0px;width: 25px; height: 25px;outline:none" id="group">G</button>
					</div>
				</div>				
			</div>
			
            <div class="col-sm-6">
                <div class="panel panel-default">

                    <div class="panel-heading">@(TextResources.TagSelectorTitle)</div>
                    <div class="panel-body tab-content">
                        @for (int x = 0; x < @Model.Count; ++x)
                        {
                            @{ var tags = @Model[x].Item2;}

                            <div id="tags_@x" class="tab-pane fade @(x == 0 ? "in active" : "")">
                                @if (tags.Count() != 0)
                                {
                                    @for (int i = 0; i < tags.Count(); i++)
                                    {
                                        <span class="tag unselectable" location="@x">
                                            @tags.ElementAt(i)
                                        </span>
                                    }
                                }
                                else
                                {
                                    <span class="no-tags">(@TextResources.NoTagsText)</span>
                                }
                            </div>
                        }

                    </div>

                </div>
            </div>
        </div>

        <div class="col-sm-8">
            <div class="panel panel-default" style="height:560px">
                <div class="panel-heading">@(TextResources.GraphTitle)</div>
                <div class="panel-body chartwrapper">
                    @Html.Partial("graph.cshtml")
                </div>
            </div>
        </div>

		<div class="col-sm-4">
            <div class="panel panel-default" style="height: 560px;">

                <div class="panel-heading">@(TextResources.SensorSelectorTitle)<select id='sortselect' style="float:right;width: 25%;" onchange="sort()"><option value="a-z">A-Z</option><option value="usage">Usage</option></select></div>

                <div class="panel-body tab-content pre-scrollable" style="max-height: 93%">

                    @for (int x = 0; x < @Model.Count; ++x)
                    {
                        <div id="u_@x" class="tab-pane fade @(x == 0 ? "in active" : "")">
                            <ul class="nav nav-pills nav-stacked" id='sensoren'>

                                @foreach (var item in @Model[x].Item3)
                                {
                                    @{ 
                                        Sensor sensor = item.Item1;
                                        var tags = item.Item2;
                                    }
                                    <li id="@sensor.Id" onClick="measurementsGraph.setId(@sensor.Id)">
                                        <div class="clickable-item" style="width: 100%; display: table;">
                                            <div style="display: table-row">
                                                <div style="display: table-cell;">
                                                    <p id="test" style="padding: 0px; margin: 0px;">@sensor.Data.Name</p>
                                                    <div id="@(sensor.Id)-description" class="sensor-desciption">
                                                        @sensor.Data.Description
                                                        <a href="#" style="float:right;" data-toggle="tooltip" class="sensor-desciption"
                                                           title="Tagged as: @foreach( var tag in tags){@(tag)<text> </text>}">tags</a>
                                                    </div>
    
                                                </div>
    
                                                <a href="/edit-sensor/@sensor.Id" class="add-tag" style="width: 25px; display: table-cell;">
                                                    <span class="glyphicon glyphicon-cog" style="float: right;" />
                                                </a>
                                            </div>
                                        </div>

                                        <div class="sensor-tags" hidden>
                                            @foreach (var tag in tags)
                                            {
                                                <div class="tag">@tag</div>
                                            }
                                        </div>

                                    </li>
                                }

                            </ul>
                        </div>
                    }

                </div>
            </div>
        </div>
    </div>
}

<script type="text/javascript">

    var now = Date();

    $(function () {
        $('input[name="daterange"]').daterangepicker({
            locale: {
                format: 'YYYY/MM/DD HH:mm'
            },
            timePicker24Hour: true,
            timePicker: true,
            autoApply: true,
            linkedCalendars: false,
            ranges:{
                'Today': [moment(), moment()],
                'Yesterday': [moment().subtract(1, 'days'), moment().subtract(1, 'days')],
                'Last 7 Days': [moment().subtract(6, 'days'), moment()],
                'Last 30 Days': [moment().subtract(29, 'days'), moment()],
                'This Month': [moment().startOf('month'), moment().endOf('month')],
                'Last Month': [moment().subtract(1, 'month').startOf('month'), moment().subtract(1, 'month').endOf('month')]
            },
            startDate: moment(),
            endDate: moment()
        }, function (start, end, label) {
            var date1 = new Date(start.format('YYYY-MM-DDTHH:mm:ss'));
            var date2 = new Date(end.format('YYYY-MM-DDTHH:mm:ss'));
            measurementsGraph.setTimeframe(date1, date2);
        });
    });

</script>

<script>
    $(document).ready(function () {
        // Make sensor selection look good
        $('.nav').on('click', "li .clickable-item", function (e) {
            var $parent = $(this).parent();
            var $holder = $parent.parent();
			if(!measurementsGraph.getGroup()){$holder.children().removeClass('active');}

            if (!$parent.hasClass('active')) {
                $parent.addClass('active');
            }else if(measurementsGraph.getGroup()){
				$parent.removeClass('active');
			}
        });

        // Make tag selection work and look good
        $('.tag').click(function (e) {

            var tag = $(this).text().trim();
            var loc = $(this).attr("location");

            if ($(this).hasClass('active')) {
                $(this).removeClass('active');
                filteredTags[loc].splice(filteredTags[loc].indexOf(tag),1);
            } else {
                $(this).addClass('active');
                filteredTags[loc].push(tag);
            }

            updateFilteredSensors(loc);
        });
    });
    
    var filteredTags = [];

     @for (int x = 0; x < @Model.Count; ++x)
    {
         <text>filteredTags[@x] = [];</text>
    }

    function updateFilteredSensors(loc) {

        // Only filter the sensors for the current location
        var $sensors = $("#u_" + loc + " .nav").children("li");

        for(var i = 0; i < $sensors.length; i++){

            var $sensor = $sensors.eq(i);
            var $tags = $sensor.children().eq(1).children();

            // Get all of the sensor's tags
            var sensorTags = [];
            for (var k = 0; k < $tags.length; k++) {
                sensorTags.push($tags.eq(k).text());
            }

            var visible = true;
            // Check if the filtered tags are a subset of the sensor's tags
            if(filteredTags[loc].length > 0)
                visible = filteredTags[loc].every(function (val) { return sensorTags.indexOf(val) >= 0; });

            if(visible){
                if( $sensor.hasClass('hidden'))
                    $sensor.removeClass('hidden');
            } else {
                if (!$sensor.hasClass('hidden')) {
                    $sensor.addClass('hidden');
                }
            }
        }
    }
	
	function sort(){
		var select = document.getElementById('sortselect').value;
		if(select == "usage"){
			byconsumption();
		}else if(select == "a-z"){
			byalphabet();
		}

        // Reload tooltips, since moving elements disables them
		$('[data-toggle="tooltip"]').tooltip();
	}
	
	function byconsumption(){
		var sensoren = document.getElementById('sensoren');
		var items = sensoren.getElementsByTagName("li");
		var x = [];
		var newitems = [];
		for (var i = 0; i < items.length; ++i) {
			x.push([i, parseFloat(measurementsGraph.getSensorTotalUsage(items[i].id))]);
		}
		x.sort(function(a, b) { 
			return a[1] > b[1] ? 1 : -1;
		});

		for(var i = 0; i < x.length; ++i){
			newitems.push(items[x[i][0]].cloneNode(true));
		}
		for(var i = 0; i < items.length; ++i){
			sensoren.replaceChild(newitems[i], items[i]);
		}
	}
	
	
	function byalphabet(){
		var items = document.getElementById('sensoren').getElementsByTagName("li");
		var x = [];
		var newitems = [];
		
		for(var i = 0; i < items.length; ++i){
			x.push([i, items[i].firstElementChild.firstElementChild.firstElementChild.firstElementChild.innerHTML]);
		}
		
		x.sort(function(a, b) { 
			return a[1] > b[1] ? 1 : -1;
		});
		
		for(var i = 0; i < x.length; ++i){
			newitems.push(items[x[i][0]].cloneNode(true));
		}
		
		for(var i = 0; i < items.length; ++i){
			document.getElementById('sensoren').replaceChild(newitems[i], items[i]);
		}
	}


</script>