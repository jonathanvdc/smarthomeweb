@using System
@using System.Collections.Generic
@using Nancy.Security
@using SmartHomeWeb
@using SmartHomeWeb.Model
@using Nancy.ViewEngines.Razor
@inherits NancyRazorViewBase<List<LocationWithSensors>>
<script type="text/javascript" src="https://www.gstatic.com/charts/loader.js"></script>

<script type="text/javascript">
	var timeframe = "minutes";
	var currentsensor = null;

	function updatesensordescription(){
		var xmlhttp = new XMLHttpRequest();
		var url = "/api/sensors/" + currentsensor.toString();
		xmlhttp.open("GET", url, false);
		xmlhttp.send();
		var response = JSON.parse(xmlhttp.responseText);
		var newdescription = prompt("New description", response.data.description);
		alert(newdescription);
		response.data.description = newdescription;
		alert(JSON.stringify(response));
		var xhr = new XMLHttpRequest();
		xhr.open('PUT', "/api/sensors/");
		xhr.setRequestHeader('Content-Type', 'application/json');
		
		xhr.send(JSON.stringify(response));
		alert(xhr.responseText);
	}

	function setFrame(x) {
		timeframe = x;
		drawChart();
	}

	function setId(x) {
		currentsensor = x;
		drawChart();
	}

	// Replaces measurement data that consists of 'null'
	// measurements only, by a simple empty array. This
	// allows us to display an accurate error message.
	function processData(json) {
	    for (var i = 0; i < json.length; i++) {
	        if (json[i].measurement !== null)
	            return json;
	    }
	    return [];
	}

	// Performs a GET REST call to our API,
	// and parses the response as JSON.
	function requestData(url, callback) {
		var xmlhttp = new XMLHttpRequest();
		xmlhttp.open("GET", url, true);
		xmlhttp.onload = function (e) {
			callback(processData(JSON.parse(xmlhttp.responseText)));
		};
		xmlhttp.send(null);
	}

	function drawRawMeasurements() {
		currentDate = new Date();
		currentDate2 = new Date();
		currentDate2.setHours(currentDate2.getHours() - 1);
		var url = "/api/measurements/" + currentsensor.toString() + "/" + timeString(currentDate2) + "/" + timeString(currentDate);
		return requestData(url, drawData);
	}

	function drawHours() {
		currentDate = new Date();
		currentDate.setDate(currentDate.getDate() - 1);
		currentDate.setHours(currentDate.getHours()+1);
		var url = "/api/hour-average/" + currentsensor.toString()+ "/" + timeString(currentDate) + "/24";
		return requestData(url, drawData);
	}

	function drawDays() {
		currentDate = new Date();
		currentDate.setMonth(currentDate.getMonth() - 1);
		var url = "/api/day-average/" + currentsensor.toString()+ "/" + timeString(currentDate) + "/31";
		return requestData(url, drawData);
	}

	function drawMonths() {
		currentDate = new Date();
		currentDate.setFullYear(currentDate.getFullYear() - 1);
		var url = "/api/month-average/" + currentsensor.toString() + "/" + timeString(currentDate) + "/13";
		return requestData(url, drawData);
	}

	function timeString(time) {
		var seconds = time.getSeconds() < 10 ? "0"+time.getSeconds().toString() : time.getSeconds().toString();
		var minutes = time.getMinutes() < 10 ? "0"+time.getMinutes().toString() : time.getMinutes().toString();
		var hours = time.getHours() < 10 ? "0"+time.getHours().toString() : time.getHours().toString();
		var day =  time.getDate().toString();
		var month = (time.getMonth()+1).toString();
		var year =	time.getFullYear().toString();
		var datestring = year + "-" + month + "-" + day + "T" + hours + ":" + minutes + ":" + seconds;
		return datestring;
	}
	

    // Load the Visualization API and the corechart package.
    google.charts.load('current', {'packages':['corechart']});
    var noDataSavedHtml = "<h3>This sensor hasn't made any measurements yet.</h3>";
    var noSensorSelectedHtml = "<h3>Select a sensor to inspect its measurements.</h3>";

    // Set a callback to run when the Google Visualization API is loaded.
	@if (@Model.Count != 0) {
		@:google.charts.setOnLoadCallback(function() { drawChart() });
	}

	function drawData(json) {
		if (json.length === 0) {
		    document.getElementById('chart_div').innerHTML = noDataSavedHtml;
		}
		else {
			var array = [];
			for (var i = 0; i < json.length; i++) {
				var sensorData = json[i];
				var date = new Date(sensorData.timestamp);
				var hmsstring = date.toISOString().substring(11, 19);
				if (sensorData.measurement === null) {
					array.push([hmsstring, 0]);
				}
				else {
					array.push([hmsstring, sensorData.measurement]);
				}
			}

			var data = new google.visualization.DataTable();
			data.addColumn('string', 'Time');
			data.addColumn('number', 'Usage');
			data.addRows(array);
			// Set chart options
			var options = {'width':600,
							'height':500};
			// Instantiate and draw our chart, passing in some options.
			var chart = new google.visualization.LineChart(document.getElementById('chart_div'));

			chart.draw(data, options);
		}
	}
	
    // Callback that creates and populates a data table,
    // instantiates the line chart, passes in the data and
    // draws it.
    function drawChart() {
    	if (currentsensor === null) {
			document.getElementById('chart_div').innerHTML = noSensorSelectedHtml;
			return;
		}

		var f = { 'minutes' : drawRawMeasurements, 'hours' : drawHours, 'days' : drawDays, 'months' : drawMonths }[timeframe];
		f();
    }
	  
</script>

<h2>@TextResources.MeasurementsPageTitle</h2>

@if (@Model.Count == 0)
{
    <h3>@TextResources.EmptyDashboardTitle</h3>
    <div>
	    @TextResources.DashboardAddLocationPre
	    <a href="/add-has-location">@TextResources.DashboardAddLocation</a>
        @TextResources.DashboardAddLocationPost
    </div>
}
else
{
    <div class="container col-sm-12">
        <ul class="nav nav-tabs col-sm-12">
	    @for(var x = 0; x < @Model.Count; ++x)
		{
		  <li @(x == 0 ? Html.Raw("class=\"active\"") : Html.Raw(""))><a data-toggle="tab" href="#u_@x">@Model[@x].Location.Data.Name</a></li>
		}
		</ul>
		<div class="col-sm-12">
		<ul class="nav nav-pills">
		  <li class="active" onClick='setFrame("minutes")'><a href="#" data-toggle="tab">Minutes</a></li>
		  <li onClick='setFrame("hours")'><a href="#" data-toggle="tab">Hours</a></li>
		  <li onClick='setFrame("days")'><a href="#" data-toggle="tab">Days</a></li>
		  <li onClick='setFrame("months")'><a href="#" data-toggle="tab">Months</a></li>
		</ul>
		
		<input type="text" value="test"></input>
		<input type="text" value="test"></input>
		</div>
		<div class="col-sm-8">
		    <div id="chart_div"></div>
		</div>
		<div class="tab-content col-sm-4">
		  
		@for (int x = 0; x < @Model.Count; ++x)
		{
		  <div id="u_@x" class="tab-pane fade @(x == 0 ? "in active" : "")" style="height: 55%; overflow:auto;">
			<ul class="nav nav-pills nav-stacked">
				@foreach (var y in @Model[x].Sensors)
				{
				  <li id="@y.Id" onClick="setId(this.id)"><a>@y.Data.Name<span class="glyphicon glyphicon-cog" style="float: right;" onClick="updatesensordescription()"></a></li>
				}
			</ul>
		  </div>
		}
		</div> 
    </div>
}

