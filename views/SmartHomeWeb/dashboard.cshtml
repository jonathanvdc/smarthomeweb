@using System
@using System.Linq
@using System.Collections.Generic
@using Nancy.Security
@using SmartHomeWeb
@using SmartHomeWeb.Model
@using Nancy.ViewEngines.Razor
@inherits NancyRazorViewBase<DashboardType>
@*
    Model.Item2 is the user's GUID.
    Model.Item1 is a list of tuples T, so that:
        T.Item1 is a Location.
        T.Item2 is a list of its tags.
        T.Item3 a list of tuples U, so that:
            U.Item1 is a Sensor.
            U.Item2 is a list of tags.
*@

<!-- Include Date Range Picker -->
<script type="text/javascript" src="//cdn.jsdelivr.net/momentjs/latest/moment.min.js"></script>
<script type="text/javascript" src="//cdn.jsdelivr.net/bootstrap.daterangepicker/2/daterangepicker.js"></script>
<link rel="stylesheet" type="text/css" href="//cdn.jsdelivr.net/bootstrap.daterangepicker/2/daterangepicker.css" />

<h2>@TextResources.MeasurementsPageTitle</h2>

@if (@Model.Item1.Count == 0)
{
    <div class="panel panel-default">
        <div class="panel-body">
            <h3>@TextResources.EmptyDashboardTitle</h3>
            @TextResources.DashboardAddLocationPre
            <a href="/add-has-location">@TextResources.DashboardAddLocation</a>
            @TextResources.DashboardAddLocationPost
        </div>
    </div>
}
else
{
    <ul class="nav nav-tabs col-sm-12">
        @for (var x = 0; x < @Model.Item1.Count; ++x)
        {
            <li class="@(x == 0 ? "active" : "")">
                <a data-toggle="tab" data-target="#u_@x, #tags_@x" onclick="currentLocation = @x">
                    @Model.Item1[@x].Item1.Data.Name
                </a>
            </li>
        }
    </ul>

    <div class="container col-sm-12">

        <div class="container col-sm-12" style="margin-top: 15px; padding:0px">
            <div class="col-sm-4">
                <div class="panel panel-default">

                    <div class="panel-heading">@TextResources.RangeSelectorTitle</div>
                    <div id="range-selector" class="panel-body">
	                    <input id="daterange" name="daterange" size="35"/>
	                    <br/>
                        <div style="margin-top:5px;margin-bottom:-5px;">
                            <label class="radio-inline">
                                <input type="radio" name="date-granularity" id="dg-fine" value="500" checked="checked">
                                Fine
                            </label>
                            <label class="radio-inline">
                                <input type="radio" name="date-granularity" id="dg-medium" value="150">
                                Medium
                            </label>
                            <label class="radio-inline">
                                <input type="radio" name="date-granularity" id="dg-coarse" value="50">
                                Coarse
                            </label>
                        </div>
                    </div>

                </div>
            </div>

			<div class="col-sm-3" style="padding:0px">
                <div class="panel panel-default">
                    <div class="panel-heading">@(TextResources.ToolSelectorTitle)</div>
					<div class="panel-body tab-content btn-group hold-when-clicked" style="padding:12px">
                        <a href="#" onclick="setSum(false)" class="btn btn-default dashboard-tool-button active" id="sumButton">
                            @TextResources.DashboardStackButtonLabel
                        </a>
                        <a href="#" onclick="setSum(true)" class="btn btn-default dashboard-tool-button" id="sumButton">
                            @TextResources.DashboardSumButtonLabel
                        </a>
					</div>
				</div>
			</div>

            <div class="col-sm-5">
                <div class="panel panel-default">

                    <div class="panel-heading">@(TextResources.TagSelectorTitle)</div>
                    <div class="panel-body tab-content">
                        @for (int x = 0; x < @Model.Item1.Count; ++x)
                        {
                            var tags = @Model.Item1[x].Item2;

                            <div id="tags_@x" class="tab-pane fade @(x == 0 ? "in active" : "")">
                                @if (tags.Count() != 0)
                                {
                                    for (int i = 0; i < tags.Count(); i++)
                                    {
                                        <span class="tag unselectable">
                                            @tags.ElementAt(i)
                                        </span>
                                    }
                                }
                                else
                                {
                                    <span class="no-tags">(@TextResources.NoTagsText)</span>
                                }
                            </div>
                        }

                    </div>

                </div>
            </div>
        </div>

        <div class="col-sm-8">
            <div class="panel panel-default" style="height:560px">
                <div class="panel-heading">@(TextResources.GraphTitle)</div>
                <div class="panel-body chartwrapper">
                    @Html.Partial("graph-control.cshtml", Model.Item2)
                </div>
            </div>
        </div>

		<div class="col-sm-4">
            <div class="panel panel-default" style="height: 560px;">

	            <div class="panel-heading">
		            <!-- @(TextResources.SensorSelectorTitle) -->

		            <div class="panel-body tab-content btn-group" style="padding: 0px;">
			            <a href="#" onclick="sensorSelectAll();" class="btn btn-default dashboard-tool-button" id="sensorSelectAllButton">
                            @TextResources.DashboardSensorSelectAllLabel
                        </a>
			            <a href="#" onclick="sensorSelectNone();" class="btn btn-default dashboard-tool-button" id="sensorSelectNoneButton">
				            @TextResources.DashboardSensorSelectNoneLabel
			            </a>
			            <a href="#" onclick="sensorSelectToggle();" class="btn btn-default dashboard-tool-button" id="sensorSelectToggleButton">
                            @TextResources.DashboardSensorSelectToggleLabel
                        </a>
		            </div>

		            <select id='sortselect' style="float: right; width: 25%; margin: 5px;" onchange="sort()">
			            <option value="a-z">A-Z</option>
                        <option value="usage">Usage</option>
		            </select>
	            </div>

                <div class="panel-body tab-content pre-scrollable" style="max-height: 91%">

                    @for (int x = 0; x < Model.Item1.Count; ++x)
                    {
                        <div id="u_@x" class="tab-pane fade @(x == 0 ? "in active" : "")">
                            <ul class="nav nav-pills nav-stacked">

                                @foreach (var item in Model.Item1[x].Item3)
                                {
                                    Sensor sensor = item.Item1;
                                    var tags = item.Item2;
                                    <li sensor-id="@sensor.Id" onClick="toggleId(@sensor.Id)">
                                        <div class="clickable-item" style="width: 100%; display: table;">

                                            <div style="display: table-row">
                                                <div style="display: table-cell;">
                                                    <p style="padding: 0px; margin: 0px;">@sensor.Data.Name</p>
                                                </div>

                                                <a href="/edit-sensor/@sensor.Id" style="width: 25px; display: table-cell;">
                                                    <span class="glyphicon glyphicon-cog" style="float: right;" />
                                                </a>
                                            </div>
                                            <div style="display:table-row;">

                                                <div id="@(sensor.Id)-description" class="sensor-description" style="display:table-cell">
                                                    @sensor.Data.Description
                                                    <a href="#" style="float:right;" data-toggle="tooltip" class="sensor-description"
                                                       title="@(TextResources.TaggedAsLabel): @foreach( var tag in tags){@(tag)<text> </text>}">tags</a>
                                                </div>

                                                <a href="/add-tag/@sensor.Id" class="add-tag" style="width: 25px; display: table-cell;">
                                                    <span class="glyphicon glyphicon-plus" style="float: right;"></span>
                                                </a>
                                            </div>
                                        </div>

                                        <div class="sensor-tags" hidden>
                                            @foreach (var tag in tags)
                                            {
                                                <div class="tag">@tag</div>
                                            }
                                        </div>

                                    </li>
                                }

                            </ul>
                        </div>
                    }

                </div>
            </div>
        </div>
    </div>
}

<script type="text/javascript">

    var state = { 'sensorIds' : [], 'startTime' : null, 'endTime' : null, 'sum' : false };

    setTimeframe = function(startTime, endTime) {
        state['startTime'] = startTime;
        state['endTime'] = endTime;
        flushState();
    };

    // Get the maximum number of measurements to fetch in an autofit range.
    // This number is controlled by the user (fine-medium-coarse).
    var getMaxMeasurementCount = function() {
        return +$("[name=date-granularity]:checked").val();
    };

    // Creates an autofitted range for the sensor with the given identifier,
    // that has the given start and end time.
    // This function relies on the assumption that the current state is valid.
    var createRange = function(sensorId) {
        return new AutofitRange(
            sensorId, state['startTime'], state['endTime'], getMaxMeasurementCount());
    };

    // All <li> tags in the sensor list.
    var allSensors = function() {
        return $('#u_' + currentLocation + ' li');
    };

    // All sensors' IDs.
    var allSensorIds = function() {
        return allSensors().map(function() { return +this.getAttribute('sensor-id'); });
    };

    // All <li> tags in the sensor list that occur in state['sensorIds'].
    var allSelectedSensors = function() {
        return allSensors().filter(function(index, li) {
            return $.inArray(+li.getAttribute('sensor-id'), state['sensorIds']) !== -1;
        });
    }

    // Given f : Boolean -> Boolean, apply f to the "is-selected" state of
    // each sensor in the current location: f(x => 1) will select all,
    // f(x => 0) will select none, and f(x => !x) will toggle the selection.
    var massSelect = function(f) {
        state['sensorIds'] =
            $.grep(allSensorIds(), function(id) {
                var current = $.inArray(id, state['sensorIds']) !== -1;
                return f(current);
            });

        flushState();

        // Update all <li> tags' classes.
        allSensors().removeClass('active');
        allSelectedSensors().addClass('active');
    };

    sensorSelectAll    = function() { massSelect(function(b) { return true; }); };
    sensorSelectNone   = function() { massSelect(function(b) { return false; }); };
    sensorSelectToggle = function() { massSelect(function(b) { return !b; }); };

    toggleId = function(sensorId) {
        var oldIdCount = state['sensorIds'].length;
        var filteredIds = $.grep(state['sensorIds'], function(id) {
            return id !== sensorId;
        });
        if (oldIdCount === filteredIds.length) {
            state['sensorIds'].push(sensorId);
            if (isValidState()) {
                measurementsGraph.chartDesc.addRange(createRange(sensorId));
            }
        }
        else {
            state['sensorIds'] = filteredIds;
            if (isValidState()) {
                measurementsGraph.chartDesc.filterRanges(function(range) {
                    return range.sensorId !== sensorId;
                });
            }
        }
    };

    setSum = function(bool) {
        state['sum'] = bool;
        if (isValidState())
            flushSum();
    };

    toggleSum = function() {
        state['sum'] = !state['sum'];
        if (isValidState())
            flushSum();
    };

    var isValidState = function() {
        return state['sensorIds'] !== null && state['startTime'] !== null
            && state['endTime'] !== null && state['sum'] !== null;
    };

    // Computes the sum measurement of the given list of range-measurement pairs.
    // It is safe to assume that the given list is nonempty. (graph-control.cshtml
    // maintains this invariant.)
    var measurementSum = function(rangesAndData, index) {
        var totalData = { measurement : 0.0, notes : '' };

        for (var i = 0; i < rangesAndData.length; i++) {
            var dataPoint = rangesAndData[i][1];
            totalData.sensorId = dataPoint.sensorId;
            totalData.timestamp = dataPoint.timestamp;
            totalData.measurement += dataPoint.measurement;
            if (dataPoint.notes !== null && dataPoint.notes !== '') {
                if (totalData.notes !== '') {
                    totalData.notes += "<br/>";
                }
                totalData.notes += dataPoint.notes;
            }
        }

        // Return the first range as a key, along with the
        // aggregated data.
        return [rangesAndData[0][0], totalData];
    };

    var flushSum = function() {
        if (state['sum'])
            measurementsGraph.setAggregationFunction(measurementSum);
        else
            measurementsGraph.setAggregationFunction(null);
    };

    var flushState = function() {
        if (isValidState()) {
            measurementsGraph.chartDesc.batchChanges(function() {
                flushSum();
                measurementsGraph.chartDesc.clearRanges();
                var sensorIds = state['sensorIds'];
                for (var i = 0; i < sensorIds.length; i++) {
                    measurementsGraph.chartDesc.addRange(createRange(sensorIds[i]));
                }
            });
        }
    };

    var momentToDate = function(m) {
        return new Date(m.format('YYYY-MM-DDTHH:mm:ss'));
    };

    var defaultStartMoment = moment().subtract(6, 'days');
    var defaultEndMoment = moment();
    $(function () {
        $('input[name="daterange"]').daterangepicker({
            locale: {
                format: 'YYYY/MM/DD HH:mm'
            },
            timePicker24Hour: true,
            timePicker: true,
            autoApply: true,
            linkedCalendars: false,
            ranges:{
                '@TextResources.TimeToday': [moment(), moment()],
                '@TextResources.TimeLast7Days': [moment().subtract(6, 'days'), moment()],
                '@TextResources.TimeThisMonth': [moment().startOf('month'), moment().endOf('month')],
                '@TextResources.TimeLast30Days': [moment().subtract(29, 'days'), moment()],
                '@TextResources.TimeThisYear': [moment().startOf('year'), moment().endOf('year')],
                '@TextResources.TimeLast365Days': [moment().subtract(364, 'days'), moment()],
            },
            startDate: defaultStartMoment,
            endDate: defaultEndMoment
        }, function (start, end, label) {
            setTimeframe(momentToDate(start), momentToDate(end));
        });
    });
    setTimeframe(momentToDate(defaultStartMoment), momentToDate(defaultEndMoment));

    $(document).ready(function () {
        // Make sensor selection look good
        $('.nav').on('click', "li .clickable-item", function (e) {
            var $parent = $(this).parent();
            var $holder = $parent.parent();

            if (!$parent.hasClass('active')) {
                $parent.addClass('active');
            }
            else {
				$parent.removeClass('active');
			}
        });

        // Make tag selection work and look good
        $('.tag').click(function (e) {

            var tag = $(this).text().trim();

            if ($(this).hasClass('active')) {
                $(this).removeClass('active');
                filteredTags[currentLocation].splice(filteredTags[currentLocation].indexOf(tag),1);
            }
            else {
                $(this).addClass('active');
                filteredTags[currentLocation].push(tag);
            }

            updateFilteredSensors();
        });

        // make button groups look good
        $(".btn-group.hold-when-clicked a").click(function(){
            $(this).siblings().removeClass("active");
            $(this).addClass("active");
        });

        $('input[name=date-granularity]').change(flushState);
    });

    var filteredTags = [];

    // currentLocation is a variable that holds the index to the currently selected location
    @if (Model.Item1.Count > 0)
    {
        <text>var currentLocation = 0;</text>
    }

    @for (int x = 0; x < @Model.Item1.Count; ++x)
    {
         <text>filteredTags[@x] = [];</text>
    }

    function updateFilteredSensors() {

        // Only filter the sensors for the current location
        var $sensors = $("#u_" + currentLocation + " .nav").children("li");

        for (var i = 0; i < $sensors.length; i++) {

            var $sensor = $sensors.eq(i);
            var $tags = $sensor.children().eq(1).children();

            // Get all of the sensor's tags
            var sensorTags = [];
            for (var k = 0; k < $tags.length; k++) {
                sensorTags.push($tags.eq(k).text());
            }

            var visible = true;
            // Check if the filtered tags are a subset of the sensor's tags
            if (filteredTags[currentLocation].length > 0)
                visible = filteredTags[currentLocation].every(function (val) { return sensorTags.indexOf(val) >= 0; });

            if (visible) {
                if( $sensor.hasClass('hidden'))
                    $sensor.removeClass('hidden');
            }
            else {
                if (!$sensor.hasClass('hidden')) {
                    $sensor.addClass('hidden');
                }
            }
        }
    }

	function sort() {
		var select = document.getElementById('sortselect').value;
		if (select == "usage") {
			byconsumption();
		}
        else if (select == "a-z") {
			byalphabet();
		}

        // Reload tooltips, since moving elements disables them
		$('[data-toggle="tooltip"]').tooltip();
	}

	function byconsumption(){
		var sensors = document.getElementById('u_' + currentLocation).children[0];
		var items = sensors.getElementsByTagName("li");
        var ids = $.map(items, function(elem) {
            return createRange(elem.getAttribute("sensor-id")).getTotalUsageAsync();
        });
        GraphHelpers.whenAll(ids, function(results) {
            var x = [];
    		var newitems = [];
    		for (var i = 0; i < results.length; ++i) {
    		    x.push([i, results[i]]);
    		}
            x.sort(function(a, b) {
                return a[1] < b[1] ? 1 : -1;
            });

            for (var i = 0; i < x.length; ++i){
                newitems.push(items[x[i][0]].cloneNode(true));
            }
            for (var i = 0; i < items.length; ++i){
                sensors.replaceChild(newitems[i], items[i]);
            }
        });
	}


	function byalphabet() {
	    var ul = allSensors();
	    ul.append(ul.children().sort(function(a, b) {
	        return $("p", a).text() > $("p", b).text() ? 1 : -1;
	    }));
	}


</script>
