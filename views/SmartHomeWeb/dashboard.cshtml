@using System
@using System.Collections.Generic
@using Nancy.Security
@using SmartHomeWeb
@using SmartHomeWeb.Model
@using Nancy.ViewEngines.Razor
@inherits NancyRazorViewBase<List<LocationWithSensors>>
<script type="text/javascript" src="https://www.gstatic.com/charts/loader.js"></script>

<script type="text/javascript">

function test(){
	var xmlhttp = new XMLHttpRequest();
	var url = "/api/sensors/" + currentsensor.toString();
	xmlhttp.open("GET", url, false);
	xmlhttp.send();
	var response = JSON.parse(xmlhttp.responseText);
	var newdescription = prompt("New description", response.data.description);
	alert(newdescription);
	response.data.description = newdescription;
	alert(JSON.stringify(response));
	var xhr = new XMLHttpRequest();
    xhr.open('PUT', "/api/sensors/");
    xhr.setRequestHeader('Content-Type', 'application/json');
	
	xhr.send(JSON.stringify(response));
	alert(xhr.responseText);
}

function setFrame(x){
	timeframe = x;
	drawChart();
}

function setId(x){
	currentsensor = x;
	drawChart();
}

function getSensor(){
	currentDate = new Date();
	currentDate2 = new Date();
	currentDate2.setHours(currentDate2.getHours() - 1);
	var xmlhttp = new XMLHttpRequest();
	var url = "/api/measurements/" + currentsensor.toString() + "/" + timeString(currentDate2) + "/" + timeString(currentDate);
	xmlhttp.open("GET", url, false);
	xmlhttp.send();
	return JSON.parse(xmlhttp.responseText);
}

function getHours(){
	var xmlhttp = new XMLHttpRequest();
	currentDate = new Date();
	currentDate.setDate(currentDate.getDate() - 1);
	currentDate.setHours(currentDate.getHours()+1);
	var url = "/api/hour-average/" + currentsensor.toString()+ "/" + timeString(currentDate) + "/24";
	xmlhttp.open("GET", url, false);
	xmlhttp.send();
	test = xmlhttp.responseText;
	var x = JSON.parse(test);
	return x;
}

function getDays(){
	var xmlhttp = new XMLHttpRequest();
	currentDate = new Date();
	currentDate.setMonth(currentDate.getMonth() - 1);
	var url = "/api/day-average/" + currentsensor.toString()+ "/" + timeString(currentDate) + "/30";
	xmlhttp.open("GET", url, false);
	xmlhttp.send();
	test = xmlhttp.responseText;
	var x = JSON.parse(test);
	return x;
}

function timeString(time)
{
	var seconds = time.getSeconds() < 10 ? "0"+time.getSeconds().toString() : time.getSeconds().toString();
	var minutes = time.getMinutes() < 10 ? "0"+time.getMinutes().toString() : time.getMinutes().toString();
	var hours = time.getHours() < 10 ? "0"+time.getHours().toString() : time.getHours().toString();
	var day =  time.getDate().toString();
	var month = (time.getMonth()+1).toString();
	var year =	time.getFullYear().toString();
	var datestring = year + "-" + month + "-" + day + "T" + hours + ":" + minutes + ":" + seconds;
	return datestring;
}


	var timeframe = "minutes";

    // Load the Visualization API and the corechart package.
    google.charts.load('current', {'packages':['corechart']});
    var noDataSavedHtml = "<h3>No sensordata is saved.</h3>";


    // Set a callback to run when the Google Visualization API is loaded.
	@if (@Model.Count != 0){
		if (@Model[0].Sensors.Count == 0){
			@:chartDiv.innerHTML = noDataSavedHtml;
		}else{
			@:var currentsensor = @Model[0].Sensors[0].Id;
			@:google.charts.setOnLoadCallback(function(){ drawChart() });
		}
	}
	
    // Callback that creates and populates a data table,
    // instantiates the pie chart, passes in the data and
    // draws it.
    function drawChart(){
		var array = [];
		if(timeframe == "minutes"){
		  var json = getSensor();
		}else if(timeframe == "hours"){
		  var json = getHours();
		}else if(timeframe == "days"){
		  var json = getDays();
		}
		
		if(json.length === 0) {
		    document.getElementById('chart_div').innerHTML = noDataSavedHtml;
		}else
		{
			for(var i = 0; i < json.length; i++)
			{
				var sensorData = json[i];
				var date = new Date(sensorData.timestamp);
				var hmsstring = date.toISOString().substring(11, 19);
				if(sensorData.measurement == null){
					array.push([hmsstring, 0]);
				}else{
					array.push([hmsstring, sensorData.measurement]);
				}
			}

			var data = new google.visualization.DataTable();
			data.addColumn('string', 'Time');
			data.addColumn('number', 'Usage');
			data.addRows(array);
			// Set chart options
			var options = {'width':600,
							'height':500};
			// Instantiate and draw our chart, passing in some options.
			var chart = new google.visualization.LineChart(document.getElementById('chart_div'));

			chart.draw(data, options);
		}
    }
	  
</script>

<h2>Messages</h2>

<ul class="media-list">
@foreach (var message in (List<Tuple<string, string>>)ViewBag.Messages)
{
	// NOTE: the above cast is necessary. Without it, the view fails to
	// render on mono, because ViewBag.Messages is one of them
	// wishy-washy dynamic objects.
    // TODO: VIEWBAG
    <li class="media">
      <div class="media-left">
        <a href="/person=@message.Item1">
	        <div class="profile-avatar-small"></div>
        </a>
      </div>
      <div class="media-body">
	      <h4 class="media-heading message-header">
		      @string.Format(TextResources.MessageHeader, message.Item1)
	      </h4>
	      <div class="bubble">
		      @message.Item2
	      </div>
      </div>
    </li>
}
</ul>

<h2>@TextResources.MeasurementsPageTitle</h2>

@if (@Model.Count == 0)
{
    <h3>@TextResources.EmptyDashboardTitle</h3>
    <div>
	    @TextResources.DashboardAddLocationPre
	    <a href="/add-has-location">@TextResources.DashboardAddLocation</a>
        @TextResources.DashboardAddLocationPost
    </div>
}
else
{
    <div class="container col-sm-12">
        <ul class="nav nav-tabs col-sm-12">
		  <li class="active"><a data-toggle="tab" href="#u_0">@Model[0].Location.Data.Name</a></li>
	  @for(var x = 1; x < @Model.Count; ++x)
		{
		  <li><a data-toggle="tab" href="#u_@x">@Model[@x].Location.Data.Name</a></li>
		}
		</ul>
		<div class="col-sm-12">
			<ul class="nav nav-pills">
			  <li class="active" onClick='setFrame("minutes")'><a href="#" data-toggle="tab">Minutes</a></li>
			  <li onClick='setFrame("hours")'><a href="#" data-toggle="tab">Hours</a></li>
			  <li onClick='setFrame("days")'><a href="#" data-toggle="tab">Days</a></li>
			</ul>
			<p>From:<input type="date"></input></p>
			<p>To:<input type="date"></input></p>
			<button data-toggle="collapse" data-target="#demo">Collapsible</button>

			<div id="demo" class="collapse">
			Lorem ipsum dolor text....
			</div>
		</div>
		<div class="col-sm-8">
		    <div id="chart_div"></div>
		</div>
		<div class="tab-content col-sm-4">


		  <div id="u_0"  class="tab-pane fade in active" style="height: 55%; overflow:auto;">
			<ul class="nav nav-pills nav-stacked">
				<li class="active" id="@Model[0].Sensors[0].Id" onClick="setId(this.id)"><a data-toggle="tab">@Model[0].Sensors[0].Data.Name<span class="glyphicon glyphicon-cog" style="float: right;" onClick="test()"></a></li>
			@for (var x = 1; x < @Model[0].Sensors.Count; x++)
			{
				<li id="@Model[0].Sensors[x].Id" onClick="setId(this.id)"><a data-toggle="tab">@Model[0].Sensors[x].Data.Name<span class="glyphicon glyphicon-cog" style="float: right;" onClick="test()"></a></li>
			}
			</ul>
		  </div>

		@for(var x = 1; x < @Model.Count; ++x)
		{
		  <div id="u_@x" class="tab-pane fade" style="height: 55%; overflow:auto;">
			<ul class="nav nav-pills nav-stacked">
				@foreach (var y in @Model[x].Sensors)
				{
				  <li id="@y.Id" onClick="setId(this.id)"><a>@y.Data.Name<span class="glyphicon glyphicon-cog" style="float: right;" onClick="test()"></a></li>
				}
			</ul>
		  </div>
		}
		</div> 
    </div>
}

