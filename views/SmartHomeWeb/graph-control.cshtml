@using System
@using System.Collections.Generic
@using Nancy.Security
@using SmartHomeWeb
@using SmartHomeWeb.Model
@using Nancy.ViewEngines.Razor
@inherits NancyRazorViewBase<dynamic>

<style>
.modal{
    position: absolute !important;
	margin-top:40%;
}
</style>

<div id="chart_wrapper">
    <div id="no-sensor-message">
        <h3>@TextResources.NoSensorSelected</h3>
        <span class="subtitle-text">@TextResources.NoSensorSelectedHelpText</span>
    </div>

    <div id="no-data-message" hidden>
        <h3>@TextResources.NoSensorData</h3>
        <span class="subtitle-text">@TextResources.NoSensorDataHelpText</span>
    </div>

    <div id="loading-message" style="position: relative; top:50px;" hidden>
        <img class="center-block loading-image" width="200px" src="/content/loading.gif" />
        <h3 class="text-center">@TextResources.Loading</h3>
    </div>

    <div id="price-div" hidden>
 		<h4>@TextResources.TotalElectricityPrice: ???</h4>
    </div>

	<div id="chart_div" hidden>
		<!-- Graph goes here -->
	</div>

</div>


<script type="text/javascript" src="https://www.gstatic.com/charts/loader.js"></script>
<script type="text/javascript" src="/content/js/smarthomeweb-charts.js"></script>

<script type="text/javascript">

    var chartElement = document.getElementById("chart_div");

    measurementsGraph = new function () {

        // Stores autofitted ranges, and raises events when they change.
        this.chartDesc = new ChartDescription();
        var chartDesc = this.chartDesc;

        // A function that aggregates multi-measurement entries, and returns
        // single-measurement entries.
        var aggregateMeasurements = null;

        // A dictionary that describes a single update to a measurement's notes.
        var notesUpdate = null;

        // Creates a list of values that is suitable for use in a Google charts
        // data table. Many sensor measurement objects are used to create this
        // list.
        var createMultiMeasurementEntry = function (rangeAndData, index, alignedDates) {
            var xCoord = alignedDates && rangeAndData.length > 0
                ? GraphHelpers.printTime(
                    new Date(getListValue(rangeAndData[0]).timestamp),
                    getListKey(rangeAndData[0]).getIntervalType())
                : index.toString();
            var results = [xCoord, ""];
            for (var i = 0; i < rangeAndData.length; i++) {
                var range = getListKey(rangeAndData[i]);
                var sensorData = getListValue(rangeAndData[i]);
                var date = new Date(sensorData.timestamp);
                var timeString = GraphHelpers.printTime(date, range.getIntervalType());
                var measured = sensorData.measurement === null ? 0 : sensorData.measurement;
                var notesPrefix = "<b>Time:</b> " + timeString + "<br/><b>Measurement:</b> " + measured + "<br/><b>Notes:</b>\n";
                var regex = new RegExp('<br/>', 'g');
                var notes = sensorData.notes === null ? "" : sensorData.notes.replace(regex, "\n");
                results.push(measured);
                results.push(notesPrefix + notes);
            }
            return results;
        };

        // Creates a list of values that is suitable for use in a Google charts
        // data table. A sensor measurement object is used to create this
        // list.
        var createSingleMeasurementEntry = function (rangeAndData) {
            var range = getListKey(rangeAndData);
            var sensorData = getListValue(rangeAndData);
            var date = new Date(sensorData.timestamp);
            var timeString = GraphHelpers.printTime(date, range.getIntervalType());
            var measured = sensorData.measurement === null ? 0 : sensorData.measurement;
            var notesPrefix = "<b>Time:</b> " + timeString + "<br/><b>Measurement:</b> " + measured + "<br/><b>Notes:</b>\n";
            var regex = new RegExp('<br/>', 'g');
            var notes = sensorData.notes === null ? "" : sensorData.notes.replace(regex, "\n");
            return [timeString, notes, measured, notesPrefix + notes];
        };

        // Creates a list of values that is suitable for use in a Google charts
        // data table. Many sensor measurement objects are used to create this
        // list. The index of the entry to create, and a boolean that indicates
        // whether the measurement timestamps are aligned for all measurements,
        // are also used.
        var createMeasurementEntry = function (rangeAndData, index, alignedDates) {
            if (rangeAndData.length === 1)
                return createSingleMeasurementEntry(rangeAndData[0]);
            else if (aggregateMeasurements === null || rangeAndData.length === 0)
                return createMultiMeasurementEntry(rangeAndData, index, alignedDates);
            else
                return createSingleMeasurementEntry(aggregateMeasurements(rangeAndData));
        };

        // Computes the greatest common denominator of a and b.
        var gcd = function (a, b) {
            while (b != 0) {
                var tmp = a % b;
                a = b;
                b = tmp;
            }
            return a;
        };

        // Computes the least common multiple of a and b.
        var lcm = function (a, b) {
            return (a * b) / gcd(a, b);
        };

        // Expands the given array to match the given number of elements `count`,
        // where `count` is a multiple of data set's size.
        var replicateData = function (measurements, count) {
            var factor = count / measurements.length;
            var results = [];
            for (var i = 0; i < measurements.length; i++) {
                for (var j = 0; j < factor; j++) {
                    results.push(measurements[i]);
                }
            }
            return results;
        };

        // Matches up the data sizes of the given list of measurements.
        // Empty measurement lists are discarded.
        var matchDataSizes = function (measurementsList) {
            var newSize = 1;
            var newMeasurements = [];
            for (var i = 0; i < measurementsList.length; i++) {
                var vals = getListValue(measurementsList[i]);
                if (vals.length !== 0) {
                    newSize = lcm(newSize, vals.length);
                    newMeasurements.push(measurementsList[i]);
                }
            }
            var results = [];
            for (var i = 0; i < newMeasurements.length; i++) {
                results.push([
                    getListKey(newMeasurements[i]),
                    replicateData(getListValue(newMeasurements[i]), newSize)
                ]);
            }
            return results;
        };

        var groupMeasurements = function (rangesAndMeasurements) {
            var measurements = [];
            for (var j = 0; j < rangesAndMeasurements.length; j++) {
                measurements.push(rangesAndMeasurements[j]);
            }
            measurements = matchDataSizes(measurements);
            var groupedMeasurements = [];
            for (var i = 0; i < measurements.length; i++) {
                var key = getListKey(measurements[i]);
                var data = getListValue(measurements[i]);
                for (var j = 0; j < data.length; j++) {
                    if (!(j in groupedMeasurements)) {
                        groupedMeasurements[j] = [];
                    }
                    groupedMeasurements[j].push([key, data[j]]);
                }
            }
            return groupedMeasurements;
        };

        // Checks whether all timestamps in the given grouped-measurements
        // array are aligned.
        var checkAlignedDates = function (groupedMeasurements) {
            for (var i = 0; i < groupedMeasurements.length; i++) {
                var dataArr = groupedMeasurements[i];
                var timestamp = null;
                for (var j = 0; j < dataArr.length; j++) {
                    var val = getListValue(dataArr[j]).timestamp;
                    if (timestamp === null)
                        timestamp = val;
                    else if (timestamp !== val)
                        return false;
                }
            }
            return true;
        };

        var showElement = function (index) {
            chartElement.hidden = !(index == 0);
            document.getElementById("no-data-message").hidden = !(index == 1);
            document.getElementById("no-sensor-message").hidden = !(index == 2);
            document.getElementById("loading-message").hidden = !(index == 3);
        };

        var showChart = function () {
            showElement(0);
        };

        var showNoDataSaved = function () {
            showElement(1);
        };

        var showNoSensorSelected = function () {
            showElement(2);
        };

        var showLoading = function () {
            showElement(3);
        };

        var hidePrice = function () {
            document.getElementById("price-div").hidden = true;
        };

        var showPrice = function (value) {
            var elem = document.getElementById("price-div");
            elem.innerHTML = "<h3>Total cost: $" + value.toString() + "</h3>";
            elem.hidden = false;
        };

        var getListKey = function (kvList) {
            return kvList[0];
        };

        var getListValue = function (kvList) {
            return kvList[1];
        };

        // Computes and displays the total electricity price
        // for the given sensor and array of measurements.
        var computePrice = function (rangesAndMeasurements) {
            if (rangesAndMeasurements.length === 0) {
                // Do nothing.
                return;
            }

            var tasks = [];
            for (var i = 0; i < rangesAndMeasurements.length; i++) {
                tasks.push(getListKey(rangesAndMeasurements[i]).computePriceAsync(
                    getListValue(rangesAndMeasurements[i])));
            }
            return GraphHelpers.whenAll(tasks, function (results) {
                var totalPrice = 0.0;
                for (var i = 0; i < results.length; i++)
                    totalPrice += results[i];
                showPrice(totalPrice);
            });
        };

        // Actually draws the chart, based on the given list of
        // range-measurements key-value pair lists.
        var drawData = function (rangesAndMeasurements) {
            if (rangesAndMeasurements.length === 0) {
                showNoSensorSelected();
            }
            else {
                var grouped = groupMeasurements(rangesAndMeasurements);

                if (grouped.length === 0) {
                    showNoDataSaved();
                    return;
                }

                var alignedDates = aggregateMeasurements === null && checkAlignedDates(grouped);
                var array = [];
                for (var i = 0; i < grouped.length; i++) {
                    array.push(createMeasurementEntry(grouped[i], i, alignedDates));
                }

                // Set chart options
                var options = {
                    'width': 600,
                    'height': 500,
                    tooltip: { isHtml: true }
                };
                var data = new google.visualization.DataTable();

                // Instantiate and draw our chart, passing in some options.
                var chart = new google.visualization.LineChart(chartElement);

                data.addColumn('string', 'Time');
                data.addColumn('string', 'Notes');
                if (aggregateMeasurements !== null) {
                    data.addColumn('number', '@TextResources.TotalUsageLabel');
                    data.addColumn({ type: 'string', role: 'tooltip', 'p': { 'html': true } });
                }
                    // if comparing graphs:
                else if (!alignedDates) {
                    $.each(rangesAndMeasurements, function (i, rangeAndData) {
                        // Name the first column
                        if (i == 0) {
                            data.addColumn('number', '@TextResources.ReferenceSensorLabel');
                        } else {
                            data.addColumn('number', '@TextResources.ComparisonSensorLabel #' + i);
                        }
                        data.addColumn({ type: 'string', role: 'tooltip', 'p': { 'html': true } });
                    });
                }
                else {
                    $.each(rangesAndMeasurements, function (i, rangeAndData) {
                        // First name all columns 'Usage', then retrieve the actual
                        // column names.
                        data.addColumn('number', 'Usage');
                        data.addColumn({ type: 'string', role: 'tooltip', 'p': { 'html': true } });
                        var range = getListKey(rangeAndData);
                        range.getSensorAsync().then(function (sensor) {
                            // Update the column label.
                            data.setColumnLabel(i * 2 + 2, sensor.data.name);
                            var myView = new google.visualization.DataView(data);
                            myView.hideColumns([1]);
                            // Re-draw the chart.
                            chart.draw(myView, options);
                        });
                    });
                }
                data.addRows(array);

                showChart();
                google.visualization.events.addListener(chart, 'select', function () {
                    if (aggregateMeasurements !== null || rangesAndMeasurements.length !== 1) {
                        // Attaching a note is nonsensical if the user has
                        // highlighted an aggregated plot.
                        return;
                    }
                    var cursor = chart.getSelection()[0];
                    if (cursor === undefined)
                        return;

                    $('#dialog_confirm_map').modal({ backdrop: false });
                    var selection = cursor.row;
                    var oldnotes = data.getValue(selection, 1);
                    document.getElementById("notesarea").value = oldnotes;
                    var selectedCol = cursor.column;
                    var sensorIndex = selectedCol - 1;
                    notesUpdate = {};
                    notesUpdate['range'] = getListKey(rangesAndMeasurements[sensorIndex]);
                    notesUpdate['timestamp'] = data.getValue(selection, 0).toString();
                    notesUpdate['measurement'] = data.getValue(selection, sensorIndex * 2 + 2);
                });
                var myView = new google.visualization.DataView(data);
                myView.hideColumns([1]);
                chart.draw(myView, options);

                // Only calculate the price if you're not comparing graphs
                if (alignedDates)
                    computePrice(rangesAndMeasurements);
            }
        };

        var hasLoadedGoogleCharts = false;

        // Callback that creates and populates a data table,
        // instantiates the line chart, passes in the data and
        // draws it.
        var drawChart = function () {
            if (!hasLoadedGoogleCharts)
                return;

            hidePrice();

            if (chartDesc.getRangeCount() === 0) {
                showNoSensorSelected();
                return;
            }

            showLoading();

            // Retrieve and draw the data.
            chartDesc.getRangesWithMeasurements(drawData);
        };

        // Re-draw the chart whenever the underlying model changes.
        this.chartDesc.onChanged(drawChart);

        // Load the Visualization API and the corechart package.
        google.charts.load('current', { 'packages': ['corechart'] });

        // Set a callback to run when the Google Visualization API is loaded.
        google.charts.setOnLoadCallback(function () {
            hasLoadedGoogleCharts = true;
            drawChart();
        });

        // Updates the notes in the database
        this.updateNotes = function () {
            var range = notesUpdate['range'];

            var xmlhttp = new XMLHttpRequest();
            var intervalType = range.getIntervalType();
            if (intervalType === "minutes") {
                xmlhttp.open("PUT", "api/measurements/updatetag", true);
            }
            else if (intervalType === "hours") {
                xmlhttp.open("PUT", "api/hour-average/updatetag", true);
            }
            else if (intervalType === "days") {
                xmlhttp.open("PUT", "api/day-average/updatetag", true);
            }
            else if (intervalType === "months") {
                xmlhttp.open("PUT", "api/month-average/updatetag", true);
            }
            else {
                xmlhttp.open("PUT", "api/year-average/updatetag", true);
            }

            xmlhttp.setRequestHeader("Content-type", "application/json");
            var area = document.getElementById('notesarea').value;
            var regex = new RegExp('\n', 'g');
            var raw = area.replace(regex, "<br/>");
            var json = {
                'sensorId': range.sensorId,
                'timestamp': notesUpdate['timestamp'],
                'measurement': notesUpdate['measurement'],
                'notes': raw
            };
            xmlhttp.onload = function (e) {
                // (Partially) invalidate the cache.
                chartDesc.invalidateCache(function (r) {
                    return r.sensorId === range.sensorId;
                });
                // Re-render the chart.
                drawChart();
            };
            xmlhttp.send(JSON.stringify(json));
        };

        // Asynchronously gets the given sensors' total usages, as an
        // array of floating-point numbers.
        // This function is part of the public API.
        this.getSensorTotalUsages = function (sensorIds, callback) {
            // Create an array of GET tasks.
            var tasks = [];
            var urlSuffix = "/" + GraphHelpers.printTime(startTime) + "/"
                + GraphHelpers.printTime(endTime) + "/" + measurementCount;
            for (var i = 0; i < sensorIds.length; i++) {
                var url = "/api/autofit/total/" + sensorIds[i].toString() + urlSuffix;
                tasks.push($.get(url));
            }
            // Wait for all tasks to complete...
            return $.when.apply($, tasks).then(function () {
                // ... then parse the argument array, and call the
                // callback on the result.
                callback($.map(arguments, parseFloat));
            });
        };

        // Asynchronously gets the given sensor's total usage, as a
        // floating-point number.
        // This function is part of the public API.
        this.getSensorTotalUsage = function (sensorId, callback) {
            return this.getSensorTotalUsages([sensorId], function (values) {
                callback(values[0]);
            });
        };

        // Sets the aggregation function to the given function.
        // This function is part of the public API.
        this.setAggregationFunction = function (func) {
            aggregateMeasurements = func;
            this.chartDesc.changed();
        };

        // Re-renders this chart.
        this.draw = drawChart;
    }

</script>

<!-- Modal -->
<div class="modal fade" id="dialog_confirm_map" tabindex="-1" role="dialog" aria-labelledby="dialog_confirm_mapLabel" aria-hidden="true">
	<div class="modal-dialog modal-sm">
		<div class="modal-content">
			<div class="modal-body">
				<textarea id="notesarea" rows=5></textarea>
			</div>
			<div class="modal-footer"> <span style="float:left"><button type="button" onclick="measurementsGraph.updateNotes()" class="btn btn-success" data-dismiss="modal">Save</button></span>
			<span style="float:right"><button type="button" class="btn btn-primary" data-dismiss="modal">Cancel</button></span>

			</div>
		</div>
		<!-- /.modal-content -->
	</div>
	<!-- /.modal-dialog -->
</div>
<!-- /.modal -->
