@using System
@using System.Collections.Generic
@using Nancy.Security
@using SmartHomeWeb
@using SmartHomeWeb.Model
@using Nancy.ViewEngines.Razor
@inherits NancyRazorViewBase<dynamic>

<style>
.modal{
    position: absolute !important;
	margin-top:40%;
}
</style>

<div id="chart_wrapper">
    <div id="no-sensor-message">
        <h3>@TextResources.NoSensorSelected</h3>
        <span class="subtitle-text">@TextResources.NoSensorSelectedHelpText</span>
    </div>

    <div id="no-data-message" hidden>
        <h3>@TextResources.NoSensorData</h3>
        <span class="subtitle-text">@TextResources.NoSensorDataHelpText</span>
    </div>

    <div id="loading-message" style="position: relative; top:50px;" hidden>
        <img class="center-block loading-image" width="200px" src="/content/loading.gif" />
        <h3 class="text-center">@TextResources.Loading</h3>
    </div>

    <div id="price-div" hidden>
 		<h4>@TextResources.TotalElectricityPrice: ???</h4>
    </div>

	<div id="chart_div" hidden>
		<!-- Graph goes here -->
	</div>

</div>


<script type="text/javascript" src="https://www.gstatic.com/charts/loader.js"></script>
<script type="text/javascript" src="content/js/smarthomeweb-charts.js"></script>

<script type="text/javascript">

    var chartElement = document.getElementById("chart_div");

	measurementsGraph = new function() {

        // Stores autofitted ranges, and raises events when they change.
        this.chartDesc = new ChartDescription();

        // A function that aggregates multi-measurement entries, and returns
        // single-measurement entries.
        var aggregateMeasurements = null;

        // A dictionary that describes a single update to a measurement's notes.
        var notesUpdate = null;

        // Creates a list of values that is suitable for use in a Google charts
        // data table. Many sensor measurement objects are used to create this
        // list.
        var createMultiMeasurementEntry = function(sensorData, index) {
            var results = [index.toString(), ""];
            for (var i = 0; i < sensorData.length; i++) {
                var timeString = GraphHelpers.printTime(date, getInterval());
                var measured = sensorData.measurement === null ? 0 : sensorData.measurement;
                var notesPrefix = "<b>Time:</b> " + timeString + "<br/><b>Measurement:</b> " + measured + "<br/><b>Notes:</b>\n";
                var regex = new RegExp('<br/>', 'g');
                var notes = sensorData.notes === null ? "" : sensorData.notes.replace(regex, "\n");
                results += [notesPrefix + notes, measured];
            }
            return results;
        };

        // Creates a list of values that is suitable for use in a Google charts
        // data table. A sensor measurement object is used to create this
        // list.
        var createSingleMeasurementEntry = function(sensorData) {
            var date = new Date(sensorData.timestamp);
            var timeString = GraphHelpers.printTime(date, getInterval());
            var measured = sensorData.measurement === null ? 0 : sensorData.measurement;
            var notesPrefix = "<b>Time:</b> " + timeString + "<br/><b>Measurement:</b> " + measured + "<br/><b>Notes:</b>\n";
            var regex = new RegExp('<br/>', 'g');
            var notes = sensorData.notes === null ? "" : sensorData.notes.replace(regex, "\n");
            return [timeString, notes, notesPrefix + notes, measured];
        };

        // Creates a list of values that is suitable for use in a Google charts
        // data table. Many sensor measurement objects are used to create this
        // list.
        var createMeasurementEntry = function(sensorData, index) {
            if (sensorData.length == 1)
                return createSingleMeasurementEntry(sensorData);
            else if (aggregateMeasurements === null)
                return createMultiMeasurementEntry(sensorData, index);
            else
                return createSingleMeasurementEntry(aggregateMeasurements(sensorData));
        };

        // Computes the greatest common denominator of a and b.
        var gcd = function(a, b) {
            return !b ? a : gcd(b, a % b);
        };

        // Computes the least common multiple of a and b.
        var lcm = function(a, b) {
            return (a * b) / gcd(a, b);
        };

        // Expands the given array to match the given number of elements `count`,
        // where `count` is a multiple of data set's size.
        var replicateData = function(measurements, count) {
            var factor = count / measurements.length;
            var results = [];
            for (var i = 0; i < measurements.length; i++) {
                for (var j = 0; j < factor; j++) {
                    results.push(measurements[i]);
                }
            }
            return results;
        };

        // Matches up the data sizes of the given list of measurements.
        // Empty measurement lists are discarded.
        var matchDataSizes = function(measurementsList) {
            var newSize = 1;
            var newMeasurements = measurementsList;
            for (var i = 0; i < measurementsList.length; i++) {
                if (measurementsList[i].length !== 0) {
                    newSize = lcm(newSize, measurementsList[i].length);
                    newMeasurements.push(measurementsList[i]);
                }
            }
            var results = [];
            for (var i = 0; i < newMeasurements.length; i++) {
                results.push(replicateData(newMeasurements[i], newSize));
            }
            return results;
        };

        var groupMeasurements = function(rangesAndMeasurements) {
            var measurements = [];
            for (var j = 0; j < rangesAndMeasurements.length; j++) {
                measurements.push(getListValue(rangesAndMeasurements[j]));
            }
            measurements = matchDataSizes(measurements);
            var groupedMeasurements = [];
            for (var i = 0; i < measurements.length; i++) {
                var data = measurements[i];
                for (var j = 0; j < data.length; j++) {
                    groupedMeasurements[j][i] += [data[j]];
                }
            }
            return groupedMeasurements;
        };

		var showElement = function(index) {
		    chartElement.hidden = !(index == 0);
		    document.getElementById("no-data-message").hidden = !(index == 1);
		    document.getElementById("no-sensor-message").hidden = !(index == 2);
		    document.getElementById("loading-message").hidden = !(index == 3);
		};

		var showChart = function() {
		    showElement(0);
		};

		var showNoDataSaved = function() {
		    showElement(1);
		};

		var showNoSensorSelected = function() {
	    	showElement(2);
		};

		var showLoading = function() {
	    	showElement(3);
		};

		var hidePrice = function() {
			document.getElementById("price-div").hidden = true;
		};

		var showPrice = function(value) {
			var elem = document.getElementById("price-div");
			elem.innerHTML = "<h3>Total cost: $" + value.toString() + "</h3>";
	    	elem.hidden = false;
		};

        var getListKey = function(kvList) {
            return kvList[0];
        };

        var getListValue = function(kvList) {
            return kvList[1];
        };

        // Computes and displays the total electricity price
        // for the given sensor and array of measurements.
        var computePrice = function(rangesAndMeasurements) {
            if (rangesAndMeasurements.length === 0) {
                // Do nothing.
                return;
            }

            // NOTE: this function assumes that that all sensors in the
            // rangesAndMeasurements list belong to the same location. This
            // is always the case for our purposes.
            var totalMeasurements = [];
            for (var i = 0; i < rangesAndMeasurements.length; i++) {
                totalMeasurements += getListValue(rangesAndMeasurements[i]);
            }
            GraphHelpers.computePrice(rangesAndMeasurements[0], totalMeasurements, showPrice);
        };

		// Actually draws the chart, based on the given list of
        // range-measurements key-value pair lists.
		var drawData = function(rangesAndMeasurements) {
			if (rangesAndMeasurements.length === 0) {
			    showNoSensorSelected();
			}
			else {
                var grouped = groupMeasurements(rangesAndMeasurements);

                if (grouped.length === 0) {
                    showNoDataSaved();
                    return;
                }

                var array = [];
                for (var i = 0; i < grouped.length; i++) {
                    array.push(createMeasurementEntry(grouped[i]));
                }

				var data = new google.visualization.DataTable();
				data.addColumn('string', 'Time');
                data.addColumn('string', 'Notes');
				for (var x = 0; x < grouped.length; x++) {
                    data.addColumn({type: 'string', role: 'tooltip', 'p': {'html': true}});
					data.addColumn('number', 'Usage');
				}
				data.addRows(array);

				// Set chart options
				var options = {'width':600,
								'height':500,
								tooltip: {isHtml: true}};
				// Instantiate and draw our chart, passing in some options.
				var myView = new google.visualization.DataView(data);
				myView.hideColumns([1]);
				showChart();
				var chart = new google.visualization.LineChart(chartElement);
				google.visualization.events.addListener(chart, 'select', function() {
                    if (aggregateMeasurements !== null || rangesAndMeasurements.length !== 1) {
                        // Attaching a note is nonsensical if the user has
                        // highlighted an aggregated plot.
                        return;
                    }
					$('#dialog_confirm_map').modal({backdrop: false});
					var selection = chart.getSelection()[0].row;
					var oldnotes = data.getValue(selection, 1);
					document.getElementById("notesarea").value = oldnotes;
                    notesUpdate = {};
                    notesUpdate['sensorId'] = getListKey(rangesAndMeasurements);
                    notesUpdate['timestamp'] = data.getValue(selection, 0).toString();
                    notesUpdate['measurement'] = data.getValue(selection, 3);
				});
				chart.draw(myView, options);

                computePrice(rangesAndMeasurements);
			}
		};

	    // Callback that creates and populates a data table,
	    // instantiates the line chart, passes in the data and
	    // draws it.
	    var drawChart = function() {
	    	if (chartDesc.getRangeCount() === 0) {
	    	    showNoSensorSelected();
				return;
	    	}

	    	hidePrice();
	    	showLoading();

            // Retrieve and draw the data.
            chartDesc.getRangesWithMeasurements(drawData);
	    };

        // Re-draw the chart whenever the underlying model changes.
        this.chartDesc.onChanged(drawChart);

	    // Load the Visualization API and the corechart package.
	    google.charts.load('current', {'packages':['corechart']});

	    // Set a callback to run when the Google Visualization API is loaded.
		google.charts.setOnLoadCallback(drawChart);

		// Updates the notes in the database
		this.updateNotes = function(){
			var diff = endTime.getTime() - startTime.getTime();
			var days = Math.floor(diff / (1000 * 60 * 60 * 24));
			var hours = Math.floor(diff / (1000 * 60 * 60));
			var mins = Math.floor(diff / (1000 * 60));
			var xmlhttp = new XMLHttpRequest();
			if (mins <= measurementCount) {
				xmlhttp.open("PUT", "api/measurements/updatetag");
			}
            else if (hours <= measurementCount) {
				xmlhttp.open("PUT", "api/hour-average/updatetag");
			}
            else if (days <= measurementCount) {
				xmlhttp.open("PUT", "api/day-average/updatetag");
			}
            else {
				xmlhttp.open("PUT", "api/month-average/updatetag");
			}

			xmlhttp.setRequestHeader("Content-type", "application/json");
			var area = document.getElementById('notesarea').value;
			var regex = new RegExp('\n', 'g');
			var raw = area.replace(regex, "<br/>");
            notesUpdate['notes'] = raw;
			xmlhttp.send(str);
			drawChart();
		};

        // Asynchronously gets the given sensors' total usages, as an
        // array of floating-point numbers.
        // This function is part of the public API.
        this.getSensorTotalUsages = function(sensorIds, callback) {
            // Create an array of GET tasks.
            var tasks = [];
            var urlSuffix = "/" + timeString(startTime) + "/" + timeString(endTime) + "/" + measurementCount;
            for (var i = 0; i < sensorIds.length; i++) {
                var url = "/api/autofit/total/" + sensorIds[i].toString() + urlSuffix;
                tasks.push($.get(url));
            }
            // Wait for all tasks to complete...
            return $.when.apply($, tasks).then(function() {
                // ... then parse the argument array, and call the
                // callback on the result.
                callback($.map(arguments, parseFloat));
            });
        };

        // Asynchronously gets the given sensor's total usage, as a
        // floating-point number.
        // This function is part of the public API.
		this.getSensorTotalUsage = function(sensorId, callback) {
            return this.getSensorTotalUsages([sensorId], function(values) {
                callback(values[0]);
            });
		};

        // Sets the aggregation function to the given function.
        // This function is part of the public API.
        this.setAggregationFunction = function(func) {
            aggregateMeasurements = func;
            this.chartDesc.changed();
        };

		// Re-renders this chart.
		this.draw = drawChart;
	}

</script>

<!-- Modal -->
<div class="modal fade" id="dialog_confirm_map" tabindex="-1" role="dialog" aria-labelledby="dialog_confirm_mapLabel" aria-hidden="true">
	<div class="modal-dialog modal-sm">
		<div class="modal-content">
			<div class="modal-body">
				<textarea id="notesarea" rows=5></textarea>
			</div>
			<div class="modal-footer"> <span style="float:left"><button type="button" onclick="measurementsGraph.updateNotes()" class="btn btn-success" data-dismiss="modal">Save</button></span>
			<span style="float:right"><button type="button" class="btn btn-primary" data-dismiss="modal">Cancel</button></span>

			</div>
		</div>
		<!-- /.modal-content -->
	</div>
	<!-- /.modal-dialog -->
</div>
<!-- /.modal -->
