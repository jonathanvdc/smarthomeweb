@using System.Collections.Generic
@using Nancy.Security
@using SmartHomeWeb.Model
@using Nancy.ViewEngines.Razor
@inherits NancyRazorViewBase<List<LocationExtended>>
@*                           ^^^^^^^^^^^^^^^^^^^    *@
@*                         This is the @Model type  *@
<script type="text/javascript" src="https://www.gstatic.com/charts/loader.js"></script>
	
<script type="text/javascript">
    // Load the Visualization API and the corechart package.
    google.charts.load('current', {'packages':['corechart']});
    // Set a callback to run when the Google Visualization API is loaded.
    google.charts.setOnLoadCallback(function(){ drawChart(@Model[0].Sensors[0].Sensor.Id) });

    // Callback that creates and populates a data table,
    // instantiates the pie chart, passes in the data and
    // draws it.
	
	
    function drawChart(x) {
		var array = [];
		var json = getSensor(x);
		if(json.length == 0)
		{
			document.getElementById('chart_div').innerHTML = "<h3>No sensordata is saved.</h3>";
		}else
		{
			for(x in json)
			{
				var date = new Date(json[x].timestamp);
				var hmsstring = date.toISOString().substring(11, 19);
				array.push([hmsstring, json[x].measurement]);
			}

			var data = new google.visualization.DataTable();
			data.addColumn('string', 'Time');
			data.addColumn('number', 'Usage');

			data.addRows(array);

			// Set chart options
			var options = {'width':600,
							'height':500};

			// Instantiate and draw our chart, passing in some options.
			var chart = new google.visualization.LineChart(document.getElementById('chart_div'));

			chart.draw(data, options);
		}
    }
	
	function getSensor(x){
		var xmlhttp = new XMLHttpRequest();
		var url = "http://localhost:8088/api/measurements/" + x.toString();
		xmlhttp.open("GET", url, false);
		xmlhttp.send();
		return myArr = JSON.parse(xmlhttp.responseText);
	}
	  
</script>

<h2>Messages</h2>

<ul class="media-list">
@foreach (var message in @ViewBag.Messages)
{
    // TODO: VIEWBAG
    <li class="media">
      <div class="media-left">
        <a href="#">
	        <img class="media-object missing-avatar" height="64px" src="content/logostencil.png" alt="@message.Item1">
        </a>
      </div>
      <div class="media-body">
        <h4 class="media-heading">@message.Item1</h4>
        @message.Item2
      </div>
    </li>
}
</ul>

<h2>Measurement</h2>

@if (@Model.Count == 0)
{
    <h3>Seems kind of lonely in here.</h3>
    <div>Maybe you should add a <a href="/add-has-location">location to your profile.</a></div>
}
else
{
    <div class="container col-sm-12">
        <ul class="nav nav-tabs col-sm-12">
		  <li class="active"><a data-toggle="tab" href="#0">@Model[0].Location.Data.Name</a></li>
		  @for(var x = 1; x < @Model.Count; ++x)
			{
			  <li><a data-toggle="tab" href="#@x">@Model[@x].Location.Data.Name</a></li>		
			}
		</ul>
		<div class="col-sm-8">
		    <div id="chart_div"></div>
		</div>
		<div class="tab-content col-sm-4">
		
		
		  <div id="0"  class="tab-pane fade in active">
			<ul class="nav nav-pills nav-stacked">
			@foreach (var x in @Model[0].Sensors)
			{
			  <li id="@x.Sensor.Id" onClick="drawChart(this.id)"><a>@x.Sensor.Data.Name</a></li>
			}
			</ul>
		  </div>
		  
			@for(var x = 1; x < @Model.Count; ++x)
			{
			  <div id="@x" class="tab-pane fade">
				<ul class="nav nav-pills nav-stacked">
					@foreach (var y in @Model[x].Sensors)
					{
					  <li id="@y.Sensor.Id" onClick="drawChart(this.id)"><a>@y.Sensor.Data.Name</a></li>
					}
				</ul>
			  </div>	
			}
		</div>
    </div>
}
