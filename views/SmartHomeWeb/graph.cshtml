@using System
@using System.Collections.Generic
@using Nancy.Security
@using SmartHomeWeb
@using SmartHomeWeb.Model
@using Nancy.ViewEngines.Razor
@inherits NancyRazorViewBase<dynamic>

<script type="text/javascript" src="https://www.gstatic.com/charts/loader.js"></script>

<script type="text/javascript">
	measurementsGraph = new function() {
		var measurementCount = 60;
		var endTime = new Date();
		var startTime = new Date();
		startTime.setHours(endTime.getHours() - 1);
		var currentsensor = null;

		// Replaces measurement data that consists of 'null'
		// measurements only, by a simple empty array. This
		// allows us to display an accurate error message.
		var processData = function(json) {
		    for (var i = 0; i < json.length; i++) {
		        if (json[i].measurement !== null)
		            return json;
		    }
		    return [];
		}

		// Performs a GET REST call to our API,
		// and parses the response as JSON.
		var requestData = function(url, callback) {
			var xmlhttp = new XMLHttpRequest();
			xmlhttp.open("GET", url, true);
			xmlhttp.onload = function (e) {
				callback(processData(JSON.parse(xmlhttp.responseText)));
			};
			xmlhttp.send(null);
		}

		// Formats the given date-time instance as an ISO date-time string.
		var timeString = function(time) {
			var seconds = time.getSeconds() < 10 ? "0"+time.getSeconds().toString() : time.getSeconds().toString();
			var minutes = time.getMinutes() < 10 ? "0"+time.getMinutes().toString() : time.getMinutes().toString();
			var hours = time.getHours() < 10 ? "0"+time.getHours().toString() : time.getHours().toString();
			var day =  time.getDate().toString();
			var month = (time.getMonth()+1).toString();
			var year =	time.getFullYear().toString();
			var datestring = year + "-" + month + "-" + day + "T" + hours + ":" + minutes + ":" + seconds;
			return datestring;
		}

		// Actually draws the chart, based on the given array
		// of JSON measurements.
		var drawData = function(json) {
			if (json.length === 0) {
			    document.getElementById('chart_div').innerHTML = noDataSavedHtml;
			}
			else {
				var array = [];
				for (var i = 0; i < json.length; i++) {
					var sensorData = json[i];
					var date = new Date(sensorData.timestamp);
					var hmsstring = date.toISOString().substring(11, 19);
					var data = sensorData.measurement === null ? 0 : sensorData.measurement;
					var notespre = "<b>Time:</b> " + hmsstring + "<br/><b>Measurement:</b> " + data + "<br/><b>Notes:</b>\n";
					var notes = sensorData.notes === null ? notespre : notespre + sensorData.notes;
					array.push([hmsstring, data, notes]);
				}

				var data = new google.visualization.DataTable();
				data.addColumn('string', 'Time');
				data.addColumn('number', 'Usage');
				data.addColumn({type: 'string', role: 'tooltip', 'p': {'html': true}});
				data.addRows(array);
				// Set chart options
				var options = {'width':600,
								'height':500,
								tooltip: {isHtml: true}};
				// Instantiate and draw our chart, passing in some options.
				var chart = new google.visualization.LineChart(document.getElementById('chart_div'));

				chart.draw(data, options);
			}
		}
		
	    // Callback that creates and populates a data table,
	    // instantiates the line chart, passes in the data and
	    // draws it.
	    var drawChart = function() {
	    	if (currentsensor === null) {
				document.getElementById('chart_div').innerHTML = noSensorSelectedHtml;
				return;
			}

			var url = "/api/autofit/" + currentsensor.toString() + "/" + timeString(startTime) + "/" + timeString(endTime) + "/" + measurementCount.toString();
			return requestData(url, drawData);
	    }
		
	    // Load the Visualization API and the corechart package.
	    google.charts.load('current', {'packages':['corechart']});
	    var noDataSavedHtml = "<h3>This sensor hasn't made any measurements yet.</h3>";
	    var noSensorSelectedHtml = "<h3>Select a sensor to inspect its measurements.</h3>";

	    // Set a callback to run when the Google Visualization API is loaded.
		google.charts.setOnLoadCallback(function() { drawChart() });

		// Sets the time frame to 'minutes', 'hours',
		// 'days' or 'months', and renders the chart. 
		// This function is part of the public API.
		this.setTimeframe = function(start_time, end_time) {
			startTime = start_time;
			endTime = end_time;
			drawChart();
		}

		// Sets the maximal number of measurements that
		// is rendered by this chart.
		this.setMaxMeasurementCount = function(n) {
			measurementCount = n;
			drawChart();
		}

		// Sets the ID of the sensor whose data is
		// to be rendered, and renders the chart
		// for that sensor.
		// This function is part of the public API.
		this.setId = function(x) {
			currentsensor = x;
			drawChart();
		}

		// Re-renders this chart.
		this.draw = drawChart;
	}
	  
</script>

<div id="chart_div"></div>