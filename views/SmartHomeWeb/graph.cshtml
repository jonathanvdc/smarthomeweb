@using System
@using System.Collections.Generic
@using Nancy.Security
@using SmartHomeWeb
@using SmartHomeWeb.Model
@using Nancy.ViewEngines.Razor
@inherits NancyRazorViewBase<dynamic>

<div id="chart_wrapper">
    <div id="no-sensor-message">
        <h3>@TextResources.NoSensorSelected</h3>
        <span class="subtitle-text">@TextResources.NoSensorSelectedHelpText</span>
    </div>

    <div id="no-data-message" hidden>
        <h3>@TextResources.NoSensorData</h3>
        <span class="subtitle-text">@TextResources.NoSensorDataHelpText</span>
    </div>

    <div id="loading-message" style="position: relative; top:50px;" hidden>
        <img class="center-block loading-image" width="200px" src="/content/loading.gif" />
        <h3 class="text-center">@TextResources.Loading</h3>
    </div>

    <div id="price-div" hidden>
 		<h4>@TextResources.TotalElectricityPrice: ???</h4>
    </div>

    <div id="chart_div" hidden>
        <!-- Graph goes here -->
    </div>
</div>

<script type="text/javascript" src="https://www.gstatic.com/charts/loader.js"></script>

<script type="text/javascript">
    
    var chartElement = document.getElementById("chart_div");

	measurementsGraph = new function() {
		var measurementCount = 60;
		var endTime = new Date();
		var startTime = new Date();
		startTime.setHours(endTime.getHours() - 1);
		var currentsensor = null;

		var showElement = function(index) {
		    chartElement.hidden = !(index == 0);
		    document.getElementById("no-data-message").hidden = !(index == 1);
		    document.getElementById("no-sensor-message").hidden = !(index == 2);
		    document.getElementById("loading-message").hidden = !(index == 3);
		};
	    
		var showChart = function() {
		    showElement(0);
		};

		var showNoDataSaved = function() {
		    showElement(1);
		};

		var showNoSensorSelected = function() {
	    	showElement(2);
		};

		var showLoading = function() {
	    	showElement(3);
		};

		var hidePrice = function() {
			document.getElementById("price-div").hidden = true;
		};

		var showPrice = function(value) {
			var elem = document.getElementById("price-div");
			elem.innerHTML = "<h3>Total cost: $" + value.toString() + "</h3>";
	    	elem.hidden = false;
		};

		// Replaces measurement data that consists of 'null'
		// measurements only, by a simple empty array. This
		// allows us to display an accurate error message.
		var processData = function(json) {
		    for (var i = 0; i < json.length; i++) {
		        if (json[i].measurement !== null)
		            return json;
		    }
		    return [];
		};

		// Performs a GET REST call to our API,
		// and parses the response as JSON.
		var requestData = function(url, callback) {
			var xmlhttp = new XMLHttpRequest();
			xmlhttp.open("GET", url, true);
			xmlhttp.onload = function (e) {
				callback(processData(JSON.parse(xmlhttp.responseText)));
			};
			xmlhttp.send(null);
		};

		// Formats the given date-time instance as an ISO date-time string.
		var timeString = function(time) {
			var seconds = time.getSeconds() < 10 ? "0"+time.getSeconds().toString() : time.getSeconds().toString();
			var minutes = time.getMinutes() < 10 ? "0"+time.getMinutes().toString() : time.getMinutes().toString();
			var hours = time.getHours() < 10 ? "0"+time.getHours().toString() : time.getHours().toString();
			var day =  time.getDate().toString();
			var month = (time.getMonth()+1).toString();
			var year =	time.getFullYear().toString();
			var datestring = year + "-" + month + "-" + day + "T" + hours + ":" + minutes + ":" + seconds;
			return datestring;
		};

		// Gets the location that is associated with the given
		// location identifier.
		// The given callback handles the resulting value.
		var getLocation = function(locationId, callback) {
			var xmlhttp = new XMLHttpRequest();
			var url = "/api/locations/" + locationId.toString();
			xmlhttp.open("GET", url, true);
			xmlhttp.onload = function (e) {
				callback(JSON.parse(xmlhttp.responseText));
			};
			xmlhttp.send(null);
		};

		// Gets the location belonging to the given sensor.
		// The given callback handles the resulting value.
		var getSensorLocation = function(sensorId, callback) {
			var xmlhttp = new XMLHttpRequest();
			var url = "/api/sensors/" + sensorId.toString();
			xmlhttp.open("GET", url, true);
			xmlhttp.onload = function (e) {
				getLocation(JSON.parse(xmlhttp.responseText).data.locationId, callback);
			};
			xmlhttp.send(null);
		};

		// Computes and displays the total electricity price
		// for the given sensor and array of measurements.
		var computePrice = function(sensorId, measurements) {
			getSensorLocation(sensorId, function(loc) {
				// A location stores its price per unit of electricity as currency/kWh.
				// Since we want the total electricity price, we will multiply
				// the location's price per unit by the total time, and the average
				// electricity usage of the currently selected sensor.
				var elecPrice = loc.data.electricityPrice;
				if (elecPrice === null)
					// This is kind of lame, really.
					return;

				var hourDiff = Math.abs(endTime.getTime() - startTime.getTime()) / 1000 / 3600;
				var totalUsage = 0.0;
				var n = 0;
				for (var i = 0; i < measurements.length; i++) {
					var sensorData = measurements[i];
					if (sensorData.measurement !== null) {
						totalUsage += sensorData.measurement;
						n++;
					}
				}
				var totalPrice = elecPrice * hourDiff * totalUsage / n;
				showPrice(totalPrice);
			});
		};

		// Actually draws the chart, based on the given array
		// of JSON measurements.
		var drawData = function(json) {
			if (json.length === 0) {
			    showNoDataSaved();
			}
			else {
				var array = [];
				for (var i = 0; i < json.length; i++) {
					var sensorData = json[i];
					var date = new Date(sensorData.timestamp);
					var hmsstring = date.toISOString().substring(11, 19);
					var data = sensorData.measurement === null ? 0 : sensorData.measurement;
					var notespre = "<b>Time:</b> " + hmsstring + "<br/><b>Measurement:</b> " + data + "<br/><b>Notes:</b>\n";
					var notes = sensorData.notes === null ? notespre : notespre + sensorData.notes;
					array.push([hmsstring, data, notes]);
				}

				var data = new google.visualization.DataTable();
				data.addColumn('string', 'Time');
				data.addColumn('number', 'Usage');
				data.addColumn({type: 'string', role: 'tooltip', 'p': {'html': true}});
				data.addRows(array);
				// Set chart options
				var options = {'width':600,
								'height':500,
								tooltip: {isHtml: true}};
			    // Instantiate and draw our chart, passing in some options.
				showChart();
				var chart = new google.visualization.LineChart(chartElement);

				chart.draw(data, options);
				computePrice(currentsensor, data);
			}
		};
		
	    // Callback that creates and populates a data table,
	    // instantiates the line chart, passes in the data and
	    // draws it.
	    var drawChart = function() {
	    	if (currentsensor === null) {
	    	    showNoSensorSelected();
				return;
	    	}

	    	hidePrice();
	    	showLoading();
            
			var url = "/api/autofit/" + currentsensor.toString() + "/" + timeString(startTime) + "/" + timeString(endTime) + "/" + measurementCount.toString();
			return requestData(url, drawData);

	    };
		
	    // Load the Visualization API and the corechart package.
	    google.charts.load('current', {'packages':['corechart']});

	    // Set a callback to run when the Google Visualization API is loaded.
		google.charts.setOnLoadCallback(function() { drawChart() });

		// Sets the time frame to 'minutes', 'hours',
		// 'days' or 'months', and renders the chart. 
		// This function is part of the public API.
		this.setTimeframe = function(start_time, end_time) {
			startTime = start_time;
			endTime = end_time;
			drawChart();
		};

		// Sets the maximal number of measurements that
		// is rendered by this chart.
		this.setMaxMeasurementCount = function(n) {
			measurementCount = n;
			drawChart();
		};

		// Sets the ID of the sensor whose data is
		// to be rendered, and renders the chart
		// for that sensor.
		// This function is part of the public API.
		this.setId = function(x) {
			currentsensor = x;
			drawChart();
		};

		// Re-renders this chart.
		this.draw = drawChart;
	};

</script>