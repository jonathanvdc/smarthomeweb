@using System
@using System.Linq
@using System.Collections.Generic
@using Nancy.Security
@using SmartHomeWeb
@using SmartHomeWeb.Model
@using Nancy.ViewEngines.Razor
@inherits NancyRazorViewBase<DashboardType>
@*
    Model.Item2 is the user's GUID.
    Model.Item1 is a list of tuples T, so that:
        T.Item1 is a Location.
        T.Item2 is a list of its tags.
        T.Item3 a list of tuples U, so that:
            U.Item1 is a Sensor.
            U.Item2 is a list of tags.
*@

<!-- Include Date Range Picker -->
<script type="text/javascript" src="//cdn.jsdelivr.net/momentjs/latest/moment.min.js"></script>
<script type="text/javascript" src="//cdn.jsdelivr.net/bootstrap.daterangepicker/2/daterangepicker.js"></script>
<link rel="stylesheet" type="text/css" href="//cdn.jsdelivr.net/bootstrap.daterangepicker/2/daterangepicker.css" />

<h2>@TextResources.CompareGraphPageTitle</h2>

@if (@Model.Item1.Count == 0)
{
    <div class="panel panel-default">
        <div class="panel-body">
            <h3>@TextResources.EmptyDashboardTitle</h3>
            @TextResources.DashboardAddLocationPre
            <a href="/add-has-location">@TextResources.DashboardAddLocation</a>
            @TextResources.DashboardAddLocationPost
        </div>
    </div>
}
else
{
    <ul class="nav nav-tabs col-sm-12">
        @for (var x = 0; x < @Model.Item1.Count; ++x)
        {
            <li class="@(x == 0 ? "active" : "")">
                <a data-toggle="tab" data-target="#u_@x, #tags_@x" onclick="currentLocation = @x">
                    @Model.Item1[@x].Item1.Data.Name
                </a>
            </li>
        }
    </ul>

    <div class="container col-sm-12" style="padding:0px">

        <div class="container col-sm-12" style="margin-top: 15px; padding:0px">

            <div class="col-sm-4">
                <div class="panel panel-default">

                    <div class="panel-heading">@TextResources.ReferenceRangeSelectorTitle</div>
                    <div class="panel-body">
                        <input id="daterange" name="daterange" size="35">
                    </div>

                </div>
            </div>

            <div class="col-sm-3">
                <div class="panel panel-default">

                    <div class="panel-heading">@TextResources.ComparisonStartTimeSelectorTitle #1</div>

                    <div class="panel-body">
                        <input id="comparison0" comparisonIndex="0" name="comparisondate" size="18">
                    </div>

                </div>
            </div>


            <div class="col-sm-2">
                <div class="panel panel-default">
                    <div class="panel-heading">@(TextResources.ComparisonPanelTitle)</div>
                    <div class="panel-body tab-content">
                        <button class="btn btn-success" onclick="addComparison()">
                            <span class="glyphicon glyphicon-plus"></span>
                        </button>

                        <button class="btn btn-danger" onclick="clearComparisons()">
                            <span class="glyphicon glyphicon-trash"></span>
                        </button>
                    </div>
                </div>
            </div>

            <div class="col-sm-3">
                <div class="panel panel-default">

                    <div class="panel-heading">@(TextResources.TagSelectorTitle)</div>
                    <div class="panel-body tab-content">
                        @for (int x = 0; x < @Model.Item1.Count; ++x)
                        {
                            var tags = @Model.Item1[x].Item2;

                            <div id="tags_@x" class="tab-pane fade @(x == 0 ? "in active" : "")">
                                @if (tags.Count() != 0)
                                {
                                    for (int i = 0; i < tags.Count(); i++)
                                    {
                                        <span class="tag unselectable">
                                            @tags.ElementAt(i)
                                        </span>
                                    }
                                }
                                else
                                {
                                    <span class="no-tags">(@TextResources.NoTagsText)</span>
                                }
                            </div>
                        }

                    </div>

                </div>
            </div>
        </div>

        <div class="col-sm-12" id="comparisonHolder" style="padding:0px">
        </div>

        <div class="col-sm-8">
            <div class="panel panel-default" style="height:560px">
                <div class="panel-heading">@(TextResources.GraphTitle)</div>
                <div class="panel-body chartwrapper">
                    @Html.Partial("graph-control.cshtml", Model.Item2)
                </div>
            </div>
        </div>

		<div class="col-sm-4">
            <div class="panel panel-default" style="height: 560px;">

	            <div class="panel-heading">
		            @(TextResources.SensorSelectorTitle)

		           <select id='sortselect' style="float: right; width: 25%;" onchange="sort()">
			            <option value="a-z">A-Z</option>
                        <option value="usage">Usage</option>
		            </select>
	            </div>

                <div class="panel-body tab-content pre-scrollable" style="max-height: 92.7%">

                    @for (int x = 0; x < Model.Item1.Count; ++x)
                    {
                        <div id="u_@x" class="tab-pane fade @(x == 0 ? "in active" : "")">
                            <ul class="nav nav-pills nav-stacked">

                                @foreach (var item in Model.Item1[x].Item3)
                                {
                                    Sensor sensor = item.Item1;
                                    var tags = item.Item2;
                                    <li sensor-id="@sensor.Id" onClick="selectId(@sensor.Id)">
                                        <div class="clickable-item" style="width: 100%; display: table;">

                                            <div style="display: table-row">
                                                <div style="display: table-cell;">
                                                    <p style="padding: 0px; margin: 0px;">@sensor.Data.Name</p>
                                                </div>

                                                <a href="/edit-sensor/@sensor.Id" style="width: 25px; display: table-cell;">
                                                    <span class="glyphicon glyphicon-cog" style="float: right;" />
                                                </a>
                                            </div>
                                            <div style="display:table-row;">

                                                <div id="@(sensor.Id)-description" class="sensor-description" style="display:table-cell">
                                                    @sensor.Data.Description
                                                    <a href="#" style="float:right;" data-toggle="tooltip" class="sensor-description"
                                                       title="@(TextResources.TaggedAsLabel): @foreach( var tag in tags){@(tag)<text> </text>}">tags</a>
                                                </div>

                                                <a href="/add-tag/@sensor.Id" class="add-tag" style="width: 25px; display: table-cell;">
                                                    <span class="glyphicon glyphicon-plus" style="float: right;"></span>
                                                </a>
                                            </div>
                                        </div>

                                        <div class="sensor-tags" hidden>
                                            @foreach (var tag in tags)
                                            {
                                                <div class="tag">@tag</div>
                                            }
                                        </div>

                                    </li>
                                }

                            </ul>
                        </div>
                    }

                </div>
            </div>
        </div>
    </div>
}

<script type="text/javascript">

    var state = { 'sensorId' : null, 'referenceStartTime' : null, 'referenceEndTime' : null, 'comparisonStartTimes' : {} };

    setTimeframe = function(startTime, endTime) {
        state['referenceStartTime'] = startTime;
        state['referenceEndTime'] = endTime;
        flushState();
    };

    // Creates an autofitted range for the sensor with the given identifier,
    // that has the given start and end time.
    // This function relies on the assumption that the current state is valid.
    var createReferenceRange = function(sensorId) {
        return new AutofitRange(
            sensorId, state['referenceStartTime'], state['referenceEndTime'], 60);
    };

    // Creates a set of autofitted ranges based off their given start times
    // and the duration of the reference period.
    // This function relies on the assumption that the current state is valid.
    var createComparisonRanges = function(sensorId, comparisonStartTimes) {
        returnRanges = [];
        var difference = state['referenceEndTime'] - state['referenceStartTime'];

        for(index in comparisonStartTimes){
            returnRanges.push(new AutofitRange(
                sensorId, comparisonStartTimes[index], new Date(comparisonStartTimes[index].getTime() + difference), 60));
        }

        return returnRanges;
    };

    selectId = function(sensorId) {
        if(state['sensorId'] === sensorId)
            return;
        state['sensorId'] = sensorId;
        flushState();
    };

    var isValidState = function() {
        return state['sensorId'] !== null && state['referenceStartTime'] !== null
            && state['referenceEndTime'] !== null && state['comparisonStartTimes'] !== null;
    };

    var flushState = function() {
        if (isValidState()) {
            measurementsGraph.chartDesc.batchChanges(function() {
                measurementsGraph.chartDesc.clearRanges();
                measurementsGraph.chartDesc.addRange(createReferenceRange(state['sensorId']));
                measurementsGraph.chartDesc.addRanges(createComparisonRanges(state['sensorId'], state['comparisonStartTimes']));
            });
        }
    };

    var momentToDate = function(m) {
        return new Date(m.format('YYYY-MM-DDTHH:mm:ss'));
    };

    var defaultStartMoment = moment().subtract(6, 'days');
    var defaultEndMoment = moment();
    $(function () {
        $('input[name="daterange"]').daterangepicker({
            locale: {
                format: 'YYYY/MM/DD HH:mm'
            },
            timePicker24Hour: true,
            timePicker: true,
            autoApply: true,
            linkedCalendars: false,
            ranges:{
                '@TextResources.TimeToday': [moment(), moment()],
                '@TextResources.TimeLast7Days': [moment().subtract(6, 'days'), moment()],
                '@TextResources.TimeThisMonth': [moment().startOf('month'), moment().endOf('month')],
                '@TextResources.TimeLast30Days': [moment().subtract(29, 'days'), moment()],
                '@TextResources.TimeThisYear': [moment().startOf('year'), moment().endOf('year')],
                '@TextResources.TimeLast365Days': [moment().subtract(364, 'days'), moment()],
            },
            startDate: defaultStartMoment,
            endDate: defaultEndMoment
        }, function (start, end, label) {
            setTimeframe(momentToDate(start), momentToDate(end));
        });
    });
    setTimeframe(momentToDate(defaultStartMoment), momentToDate(defaultEndMoment));

    var defaultComparisonMoment = moment().subtract(13, 'days');

    // Enable the specified input element to set/change the date for a new comparison graph
    // To be used when creating new comparison elements
    var enableComparisonDatePicker = function($element){
        $element.daterangepicker({
            locale: {
                format: 'YYYY/MM/DD HH:mm'
            },
            singleDatePicker: true,
            timePicker24Hour: true,
            timePicker: true,
            autoApply: true,
            ranges:{
                '@TextResources.TimeToday': [moment(), null],
                '@TextResources.Time7DaysAgo': [moment().subtract(6, 'days'), null],
                '@TextResources.TimeStartOfThisMonth': [moment().startOf('month'), null],
                '@TextResources.Time30DaysAgo': [moment().subtract(29, 'days'), null],
                '@TextResources.TimeStartOfThisYear': [moment().startOf('year'), null],
                '@TextResources.Time365DaysAgo': [moment().subtract(364, 'days'), null]
            },
            startDate: defaultComparisonMoment,
        }, function (start, end, label) {
            updateComparison($element.attr("comparisonIndex"), momentToDate(start));
        });

        updateComparison($element.attr("comparisonIndex"), momentToDate(defaultComparisonMoment));
    };

    // Function which updates the starttime for the specified comparison graph
    var updateComparison = function(index, start){
        state['comparisonStartTimes'][index] = start;
        flushState();
    };
    
    // Keeps track of how many comparison selectors there have been
    var highestComparisonIndex = 0;

    // Adds a comparison selector and a matching graph
    var addComparison = function (){
        var i = ++highestComparisonIndex;

        $('#comparisonHolder').append("\
            <div class=\"col-sm-3\">\
                <div class=\"panel panel-default\">\
                    <div class=\"panel-heading\">@(TextResources.ComparisonStartTimeSelectorTitle) #" + (i+1) + "\
                        <button onclick=\"removeComparison(" + i + ")\" class=\"btn btn-default close-panel-button\"><span class=\"glyphicon glyphicon-remove\"></span></button>\
                    </div>\
                    <div class=\"panel-body\">\
                        <input id=\"comparison" + i + "\" comparisonIndex=\"" + i + "\" name=\"comparisondate\" size=\"18\">\
                    </div>\
                </div>\
            </div>\
        ");

        enableComparisonDatePicker($('#comparison' + i));
    };

    // Remove the specified comparison selector and its respective graph
    var removeComparison = function(index){
        $('#comparison' + index).parents('.col-sm-3').remove();
        delete state['comparisonStartTimes'][index];
        flushState();
    }

    // Remove all added comparison selectors and their respective graphs
    var clearComparisons = function(){
        $('#comparisonHolder').children().remove();
        for(var i = 1; i <= highestComparisonIndex; ++i)
            delete state['comparisonStartTimes'][i];        
        flushState();
    }

    $(document).ready(function () {
        // Make sensor selection look good
        $('.nav').on('click', "li .clickable-item", function (e) {
            var $parent = $(this).parent();

            if (!$parent.hasClass('active')) {
                $parent.addClass('active');
            }
            $parent.siblings().removeClass('active');
        });

        // Make tag selection work and look good
        $('.tag').click(function (e) {

            var tag = $(this).text().trim();

            if ($(this).hasClass('active')) {
                $(this).removeClass('active');
                filteredTags[currentLocation].splice(filteredTags[currentLocation].indexOf(tag),1);
            }
            else {
                $(this).addClass('active');
                filteredTags[currentLocation].push(tag);
            }

            updateFilteredSensors();
        });

        // Make comparison work for the first datepicker
        enableComparisonDatePicker($('#comparison0'));
    });

    var filteredTags = [];

    // currentLocation is a variable that holds the index to the currently selected location
    @if (Model.Item1.Count > 0)
    {
        <text>var currentLocation = 0;</text>
    }

    @for (int x = 0; x < @Model.Item1.Count; ++x)
    {
         <text>filteredTags[@x] = [];</text>
    }

    function updateFilteredSensors() {

        // Only filter the sensors for the current location
        var $sensors = $("#u_" + currentLocation + " .nav").children("li");

        for (var i = 0; i < $sensors.length; i++) {

            var $sensor = $sensors.eq(i);
            var $tags = $sensor.children().eq(1).children();

            // Get all of the sensor's tags
            var sensorTags = [];
            for (var k = 0; k < $tags.length; k++) {
                sensorTags.push($tags.eq(k).text());
            }

            var visible = true;
            // Check if the filtered tags are a subset of the sensor's tags
            if (filteredTags[currentLocation].length > 0)
                visible = filteredTags[currentLocation].every(function (val) { return sensorTags.indexOf(val) >= 0; });

            if (visible) {
                if( $sensor.hasClass('hidden'))
                    $sensor.removeClass('hidden');
            }
            else {
                if (!$sensor.hasClass('hidden')) {
                    $sensor.addClass('hidden');
                }
            }
        }
    }

	function sort() {
		var select = document.getElementById('sortselect').value;
		if (select == "usage") {
			byconsumption();
		}
        else if (select == "a-z") {
			byalphabet();
		}

        // Reload tooltips, since moving elements disables them
		$('[data-toggle="tooltip"]').tooltip();
	}

	function byconsumption(){
		var sensors = document.getElementById('u_' + currentLocation).children[0];
		var items = sensors.getElementsByTagName("li");
        var ids = $.map(items, function(elem) {
            return createRange(elem.getAttribute("sensor-id")).getTotalUsageAsync();
        });
        GraphHelpers.whenAll(ids, function(results) {
            var x = [];
    		var newitems = [];
    		for (var i = 0; i < results.length; ++i) {
    		    x.push([i, results[i]]);
    		}
            x.sort(function(a, b) {
                return a[1] < b[1] ? 1 : -1;
            });

            for (var i = 0; i < x.length; ++i){
                newitems.push(items[x[i][0]].cloneNode(true));
            }
            for (var i = 0; i < items.length; ++i){
                sensors.replaceChild(newitems[i], items[i]);
            }
        });
	}


	function byalphabet() {
	    var ul = allSensors();
	    ul.append(ul.children().sort(function(a, b) {
	        return $("p", a).text() > $("p", b).text() ? 1 : -1;
	    }));
	}


</script>
