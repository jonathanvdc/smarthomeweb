@using System
@using System.Collections.Generic
@using Nancy.Security
@using SmartHomeWeb
@using SmartHomeWeb.Model
@using Nancy.ViewEngines.Razor
@inherits NancyRazorViewBase<IEnumerable<Location>>

<!-- Include Date Range Picker -->
<script type="text/javascript" src="//cdn.jsdelivr.net/momentjs/latest/moment.min.js"></script>
<script type="text/javascript" src="//cdn.jsdelivr.net/bootstrap.daterangepicker/2/daterangepicker.js"></script>
<link rel="stylesheet" type="text/css" href="//cdn.jsdelivr.net/bootstrap.daterangepicker/2/daterangepicker.css" />

<div class="container" style="margin-top: 50px">
	<div class="row">
		<div id="location_select" class="col-sm-12">
			<select onchange="getSensors(this.value)">
				@foreach (var x in Model)
				{
					<option value="@x.Id">
						@x.Data.Name
					</option>
				}
			</select>
			
			<input id="daterange" name="daterange" size="5" style="margin-left: 20px;">
		</div>
	</div>
	<div class="row">
		<div id="chart_div" class="col-sm-8">
			<!-- Graph goes here -->
		</div>
		<div class="col-sm-4">
			<div class="panel panel-default">
				<div class="panel-heading">Sensors</div>
				<div class="panel-body pre-scrollable" style="max-height: 350px;">
					<ul class="nav nav-pills nav-stacked" id="sensoren">
					  <li>No location selected</li>
					</ul>
				</div>
			</div>
		</div>

		<div id="steps" class="col-sm-8">
		  <table>
		    <tr>
		      <td style="padding: 5px;"><b>Amount of clusters: </b></td>
			  <td id="currentiteration">0</td>
		    </tr>
			<tr>
		      <td style="padding: 5px;"><b>Usages: </b></td>
			  <td id="firstlimit">0</td>
			  <td style="padding: 5px;padding-left:20px;"><b>Within cluster sum of squares: </b></td>
			  <td id="firstinner">0</td>
		    </tr>
			<tr>
			  <td style="padding: 5px;"><b>Total wcss:</b></td>
			  <td id="totwcss">0</td>
			</tr>
		  </table>
		  <button onclick="startkmeans()">Apply kmeans</button>
		</div>
	</div>
</div>

<script type="text/javascript" src="https://www.gstatic.com/charts/loader.js"></script>

<script type="text/javascript">

    var now = new Date();
    $(function () {
        $('input[name="daterange"]').daterangepicker({
            locale: {
                format: 'YYYY/MM'
            },
			singleDatePicker: true,
            autoApply: true,
            linkedCalendars: false,
			showDropdowns: true,
        }, function (start, end, label) {
            var date1 = new Date(start.format('YYYY-MM-DDTHH:mm:ss'));
			now = date1;
			if(currenthousehold >= 0){
			  getSensors(currenthousehold);
			}
        });
    });

</script>

<script type="text/javascript">
    var k = 0;
	var sensorlist = [];
    var means = [];
    var wcss = [];
	var currenthousehold = -1;
	// Load the Visualization API and the corechart package.
    google.charts.load('current', {'packages':['corechart']});

	//Function that will look for optimal amount of k's
	function startkmeans(){
	  var kamount = 1;
	  var verhouding = 0;
	  var wsccprev = 0;
	  var historicwcss = [];
	  var continuecheck = true;
	  while(continuecheck){
		  calculatemiddles(kamount);
		  //Apply kmeans until convergence
		  var prevwcss = 0;
		  var totalwcss = 0;
		  do{
			prevwcss = totalwcss;
			kmeans(kamount);
			totalwcss = 0;
			for(var i = 0; i < kamount; ++i){
			  totalwcss = totalwcss + wcss[i];
			}
		  }while(prevwcss != totalwcss)
		  
		  historicwcss.push(totalwcss);
		  
		  ++kamount;		  
		  //Check if an extra cluster would be beneficial
		  verhouding = wsccprev != 0 ? totalwcss / wsccprev : 1/totalwcss;
		  difference = Math.abs(totalwcss - wsccprev);
		  if(kamount > 9 || verhouding > 0.5 || difference < (sensorlist[sensorlist.length - 1][1] - sensorlist[0][1])/10){
		    continuecheck = false;
		  }else{
		    k = kamount;
		  }
		  
		  wsccprev = totalwcss;
	  }
	  kmeans(k);
	  updateDisplay(k);
	  drawChart(k);
	}
	
    // Function that calculates kmeans for n clusters
	function kmeans(n){
      var newmeans = [];
	  var newcount = [];
	  var clustermiddles = [];
	  for(var i = 0; i < n; ++i){
	    newmeans[i] = 0;
		newcount[i] = 0;
		wcss[i] = 0;
		clustermiddles[i] = 0;
	  }
	  
	  for(var i = 0; i < sensorlist.length; ++i){
	    var smallestdist = Math.pow(sensorlist[i][1] - means[0], 2);
		var index = 0;
		for(var x = 1; x < n; ++x){
		  var dist = Math.pow(sensorlist[i][1] - means[x], 2);
		  if(dist < smallestdist){
		    smallestdist = dist;
			index = x;
		  }
		}
		sensorlist[i][2] = index;
		newmeans[index] = newmeans[index] + sensorlist[i][1];
		newcount[index] = newcount[index] + 1;
		wcss[index] = wcss[index] + smallestdist;
	  }
	  
	  //calculate new means with centroids(or averages because 1d)
	  for(var i = 0; i < n; ++i){
	    means[i] = newcount[i] != 0 ? Math.round(newmeans[i]*100/newcount[i])/100 : 0;
	  }
	  
	  //Sort means for display purpose
	  means.sort(function(a, b) {
	    return a > b ? 1 : -1;
	  });
	  
	}
	
	//Divide the sensordata in n equally wide parts
	function calculatemiddles(n){
	  means = [];
	  var diff = sensorlist[sensorlist.length-1][1] - sensorlist[0][1];
	  var size = Math.round(diff*100/n)/100;
	  for(var i = 0; i < n; ++i){
	    means.push(sensorlist[0][1]+((i+0.5)*size));
	  }
	}
	
	function updateDisplay(n){
	  var meansstring = "";
	  var wcssstring = "";
	  var totalwcss = 0;
	  for(var i = 0; i < n; ++i){
	    meansstring = meansstring + means[i] + "<br/>";
		wcssstring = wcssstring + Math.round(wcss[i]*100)/100 + "<br/>";
		totalwcss = totalwcss + wcss[i];
	  }
	  totalwcss = Math.round(totalwcss*100)/100;
	  document.getElementById('currentiteration').innerHTML = k;
	  document.getElementById('firstlimit').innerHTML = meansstring;
	  document.getElementById('firstinner').innerHTML = wcssstring;
	  document.getElementById('totwcss').innerHTML = totalwcss;
	  
	 for(var i = 0; i < sensorlist.length; ++i){
	   document.getElementById(sensorlist[i][0]).style.backgroundColor = generatecolor(sensorlist[i][2], n);
	 }
	}
	
    function drawChart(k) {
      // Create the data table.
      var data = new google.visualization.DataTable();
      data.addColumn('string', 'Sensorname');
      data.addColumn('number', 'Measurement');
	  data.addColumn({ type: 'string', role: 'style' });
      data.addRows(generatedrawdata(k));

      // Set chart options
      var options = {'title':'Energy usage ',
                     'width':600,
                     'height':450,
					 seriesType: 'bars',
					 series: {
					 1: {type: 'line',enableInteractivity: false, color: "#05F228"},
					 2: {type: 'line',enableInteractivity: false, color: "#FFD903"},
					 3: {type: 'line',enableInteractivity: false, color: "#FF5447"},
					 }
					};

      // Instantiate and draw our chart, passing in some options.
      var chart = new google.visualization.ComboChart(document.getElementById('chart_div'));
      chart.draw(data, options);
    }
	
	function generatedrawdata(k){
	  var drawabledata = [];
	  for(var i = 0; i < sensorlist.length; ++i){
	    drawabledata.push([sensorlist[i][0], sensorlist[i][1], generatecolor(sensorlist[i][2], k)])
	  }
	  return drawabledata;
	}
	
	function generatecolor(index, k){
	    var colors = ["#00FF00","#9DFF00","#AEFF00","#D9FF00","#FFF700","#FFDD00","#FFBF00" ,"#FF6A00","#FF0400"];
		var returncolor = Math.round((9*((index+1)/k))-1);
		return colors[returncolor];
	}
	  
	//Adds indices to indicate to which cluster the measurement belongs
	function addindices(){
	  for(var i = 0; i < sensorlist.length; ++i){
	    if(sensorlist[i][1] <= means[0]){
		  sensorlist[i].push(0);
		  document.getElementById(sensorlist[i][0]).style.backgroundColor = generatecolor(0, 3);
		}else if(sensorlist[i][1] <= means[1]){
		  sensorlist[i].push(1);
		  document.getElementById(sensorlist[i][0]).style.backgroundColor = generatecolor(1, 3);		  
		}else{
		  sensorlist[i].push(2);
		  document.getElementById(sensorlist[i][0]).style.backgroundColor = generatecolor(2, 3);		  
		}
	  }
	}
	
	//Function that gets the monthly measurement for a certain id
	function getMonthlyMeasurement(sensorid){
		var xhttp = new XMLHttpRequest();
		xhttp.open("GET", "/api/month-average/"+sensorid.toString() + "/" + (now.getFullYear()).toString() + "-" + (now.getMonth()+1).toString() + "-01T00:00:00", false);
		xhttp.send();
		measured = JSON.parse(xhttp.responseText);
		return Math.round(measured.measurement*100)/100;
	};
	
	//Function that gets all sensors at the selected location, called when the location selection changes
	function getSensors(id){
	    means = [];
		wcss = [];
	    $("#sensoren").empty();
	    currenthousehold = id;
		sensorlist = [];
		var xhttp = new XMLHttpRequest();
		xhttp.onreadystatechange = function() {
			if (xhttp.readyState == 4) {
			   sensors = JSON.parse(xhttp.responseText);
			   var list = document.getElementById("sensoren");
			   for(var i = 0; i < sensors.length; i++)
			   {
			     var measurement = getMonthlyMeasurement(sensors[i].id);
			     var entry = document.createElement('li');
				 entry.innerHTML = '<span class="badge">Value: ' +measurement.toString() + '</span>';
				 entry.appendChild(document.createTextNode(sensors[i].data.name));
				 entry.id = sensors[i].data.name;
				 entry.className = "list-group-item"; 
				 list.appendChild(entry);
				 sensorlist.push([sensors[i].data.name, measurement]);
			   }
			   sensorlist.sort(function(a, b) {
                return a[1] > b[1] ? 1 : -1;
               });
			   
			   //Set each cluster to 1/3 of the usage
			   calculatemiddles(3);
			   addindices();
			   //Set the initial wcss:
			   for(var i = 0; i < sensorlist.length; ++i){
			     if(sensorlist[i][2] == 0){
				   wcss[0] = wcss[0] != undefined ? wcss[0] + Math.pow(sensorlist[i][1] - means[0], 2) : Math.pow(sensorlist[i][1] - means[0], 2);		   
				 }else if(sensorlist[i][2] == 1){
				   wcss[1] = wcss[1] != undefined ? wcss[1] + Math.pow(sensorlist[i][1] - means[1], 2) : Math.pow(sensorlist[i][1] - means[1], 2) ;		   
				 }else{
				   wcss[2] = wcss[2] != undefined ? wcss[2] + Math.pow(sensorlist[i][1] - means[2], 2) : Math.pow(sensorlist[i][1] - means[2], 2) ;			   
				 }
			   }
			   updateDisplay(3);
			   drawChart(3);
			}
		};
		xhttp.open("GET", "/api/sensors/at-location/" + id.toString(), true);
		xhttp.send();
	}
</script>